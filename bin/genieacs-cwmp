#!/usr/bin/env node
"use strict";const e=require("path"),t=require("fs"),s=require("os"),n=require("mongodb"),a=require("parsimmon"),r=require("ipaddr.js"),i=require("cluster"),o=require("http"),c=require("https"),l=require("zlib"),u=require("crypto"),f=require("vm"),d=require("seedrandom"),p=require("child_process"),m=require("later"),h=require("util"),g=require("iconv-lite"),w=require("yaml");function v(e){return e&&"object"==typeof e&&"default"in e?e:{default:e}}const b=v(a),y=v(i),S=v(d);let _,D,O,R,x,A,T=e.resolve(__dirname,"..");for(;!t.existsSync(T+"/package.json");){const t=e.resolve(T,"..");if(t===T){T=process.cwd();break}T=t}const E={EXT_DIR:{type:"path",default:e.resolve(T,"config/ext")},MONGODB_CONNECTION_URL:{type:"string",default:"mongodb://ec2-15-164-103-145.ap-northeast-2.compute.amazonaws.com/genieacs"},CWMP_WORKER_PROCESSES:{type:"int",default:0},CWMP_PORT:{type:"int",default:7547},CWMP_INTERFACE:{type:"string",default:"0.0.0.0"},CWMP_SSL_CERT:{type:"string",default:""},CWMP_SSL_KEY:{type:"string",default:""},CWMP_LOG_FILE:{type:"path",default:""},CWMP_ACCESS_LOG_FILE:{type:"path",default:"./log/hacs.log"},NBI_WORKER_PROCESSES:{type:"int",default:0},NBI_PORT:{type:"int",default:7557},NBI_INTERFACE:{type:"string",default:"0.0.0.0"},NBI_SSL_CERT:{type:"string",default:""},NBI_SSL_KEY:{type:"string",default:""},NBI_LOG_FILE:{type:"path",default:""},NBI_ACCESS_LOG_FILE:{type:"path",default:"./log/hacs.log"},FS_WORKER_PROCESSES:{type:"int",default:0},FS_PORT:{type:"int",default:7567},FS_INTERFACE:{type:"string",default:"0.0.0.0"},FS_SSL_CERT:{type:"string",default:""},FS_SSL_KEY:{type:"string",default:""},FS_URL_PREFIX:{type:"string",default:""},FS_LOG_FILE:{type:"path",default:""},FS_ACCESS_LOG_FILE:{type:"path",default:"./log/hacs.log"},UI_WORKER_PROCESSES:{type:"int",default:0},UI_PORT:{type:"int",default:7577},UI_INTERFACE:{type:"string",default:"0.0.0.0"},UI_SSL_CERT:{type:"string",default:""},UI_SSL_KEY:{type:"string",default:""},UI_LOG_FILE:{type:"path",default:""},UI_ACCESS_LOG_FILE:{type:"path",default:"./log/log_ui.log"},UI_JWT_SECRET:{type:"string",default:""},UDP_CONNECTION_REQUEST_PORT:{type:"int",default:0},FORWARDED_HEADER:{type:"string",default:""},DOWNLOAD_TIMEOUT:{type:"int",default:3600},EXT_TIMEOUT:{type:"int",default:3e3},MAX_CACHE_TTL:{type:"int",default:86400},DEBUG_FILE:{type:"path",default:""},DEBUG_FORMAT:{type:"string",default:"yaml"},DEBUG:{type:"bool",default:!0},RETRY_DELAY:{type:"int",default:300},SESSION_TIMEOUT:{type:"int",default:30},CONNECTION_REQUEST_TIMEOUT:{type:"int",default:2e3},GPN_NEXT_LEVEL:{type:"int",default:0},GPV_BATCH_SIZE:{type:"int",default:32},MAX_DEPTH:{type:"int",default:16},COOKIES_PATH:{type:"string",default:"/"},LOG_FORMAT:{type:"string",default:"json"},ACCESS_LOG_FORMAT:{type:"string",default:""},MAX_CONCURRENT_REQUESTS:{type:"int",default:20},DATETIME_MILLISECONDS:{type:"bool",default:!0},BOOLEAN_LITERAL:{type:"bool",default:!0},CONNECTION_REQUEST_ALLOW_BASIC_AUTH:{type:"bool",default:!1},MAX_COMMIT_ITERATIONS:{type:"int",default:32},DEVICE_ONLINE_THRESHOLD:{type:"int",default:4e3}},I={};function N(t,s,n=!1){if(null!=I[t])return!0;function a(t,s){switch(s){case"int":return Number(t);case"bool":return["true","1"].includes(String(t).trim().toLowerCase());case"string":return String(t);case"path":return t?e.resolve(t):"";default:return null}}"CONFIG_DIR"!==t&&"config-dir"!==t||(_=_||e.resolve(T,s)),"CWMP_SSL"!==t&&"cwmp-ssl"!==t||(D=D||String(s).toLowerCase().trim()),"NBI_SSL"!==t&&"nbi-ssl"!==t||(O=O||String(s).toLowerCase().trim()),"FS_SSL"!==t&&"fs-ssl"!==t||(R=R||String(s).toLowerCase().trim()),"UI_SSL"!==t&&"ui-ssl"!==t||(x=x||String(s).toLowerCase().trim()),"FS_HOSTNAME"!==t&&"fs-hostname"!==t||(A=A||String(s).trim()),"PRESETS_CACHE_DURATION"!==t&&"presets-cache-duration"!==t||N("MAX_CACHE_TTL",s),"GET_PARAMETER_NAMES_DEPTH_THRESHOLD"!==t&&"get-parameter-names-depth-threshold"!==t||N("GPN_NEXT_LEVEL",s),"TASK_PARAMETERS_BATCH_SIZE"!==t&&"task-parameters-batch-size"!==t||N("GPV_BATCH_SIZE",s),"FS_IP"!==t&&"fs-ip"!==t||N("FS_HOSTNAME",s);let r=null;for(const[e,i]of Object.entries(E)){let o=e;if(n&&(o=o.toLowerCase().replace(/_/g,"-")),t===o?(r=a(s,i.type),o=e):t.startsWith(o+"-")&&(r=a(s,i.type),o=`${e}-${t.slice(e.length+1)}`),null!=r)return I[o]=r,process.env["GENIEACS_"+o]=r,!0}return!1}const C=process.argv.slice(2);for(;C.length;){const e=C.shift();if("-"===e[0]){const t=C.shift();N(e.slice(2),t,!0)}}for(const[e,t]of Object.entries(process.env))e.startsWith("GENIEACS_")&&N(e.slice(9),t);const k=_?_+"/config.json":T+"/config/config.json";if(t.existsSync(k)){const e=JSON.parse(t.readFileSync(k).toString());for(const[t,s]of Object.entries(e))N(t,s)||(process.env["GENIEACS_"+t]=""+s)}if(_&&N("EXT_DIR",_+"/ext"),["true","1"].includes(D)){const e=_||T+"/config";N("CWMP_SSL_CERT",e+"/cwmp.crt"),N("CWMP_SSL_KEY",e+"/cwmp.key")}if(["true","1"].includes(O)){const e=_||T+"/config";N("NBI_SSL_CERT",e+"/cwmp.crt"),N("NBI_SSL_KEY",e+"/cwmp.key")}if(["true","1"].includes(R)){const e=_||T+"/config";N("FS_SSL_CERT",e+"/cwmp.crt"),N("FS_SSL_KEY",e+"/cwmp.key")}if(["true","1"].includes(x)){const e=_||T+"/config";N("UI_SSL_CERT",e+"/cwmp.crt"),N("UI_SSL_KEY",e+"/cwmp.key")}if(A){const e=I.FS_PORT||7567;N("FS_URL_PREFIX",(!!I.FS_SSL_CERT?"https":"http")+`://${A}:${e}/`)}for(const[e,t]of Object.entries(E))null!=t.default&&N(e,t.default);function L(e,t){if(!t)return I[e];let s=I[e=`${e}-${t}`];if(null!=s)return s;let n=e.lastIndexOf("-");return s=I[e.slice(0,n)],null!=s?s:(n=e.lastIndexOf("-",n-1),s=I[e.slice(0,n)],null!=s?s:(n=e.lastIndexOf("-",n-1),s=I[e.slice(0,n)],null!=s?s:(n=e.lastIndexOf("-",n-1),n>0&&(s=I[e.slice(0,n)],null!=s)?s:null)))}function P(e){return e.replace(/[-[\]/{}()*+?.\\^$|]/g,"\\$&")}function j(e){const t={b:"\b",f:"\f",n:"\n",r:"\r",t:"\t"};return e.replace(/\\(u[0-9a-fA-F]{4}|[^u])/,(e,s)=>{const n=s.charAt(0),a=s.slice(1);return"u"===n?String.fromCharCode(parseInt(a,16)):t.hasOwnProperty(n)?t[n]:n})}function $(e,t){if(!Array.isArray(e))return t(e);let s;for(let n=1;n<e.length;++n){const a=$(e[n],t);a!==e[n]&&(s=s||e.slice(),s[n]=a)}return t(s||e)}function M(e,t){return b.default.seqMap(t,b.default.seq(e,t).many(),(e,t)=>t.reduce((e,t)=>{const[s,n]=t;return Array.isArray(e)&&s===e[0]?e.concat([n]):Array.isArray(n)&&s===n[0]?[s,e].concat(n.slice(1)):[s,e,n]},e))}const q=b.default.createLanguage({ComparisonOperator:function(){return b.default.alt(b.default.string(">="),b.default.string("<>"),b.default.string("<="),b.default.string("="),b.default.string(">"),b.default.string("<")).skip(b.default.optWhitespace)},LikeOperator:function(){return b.default.alt(b.default.regexp(/like/i).result("LIKE").desc("LIKE"),b.default.regexp(/not\s+like/i).result("NOT LIKE").desc("NOT LIKE")).notFollowedBy(b.default.regexp(/[a-zA-Z0-9_]/)).skip(b.default.optWhitespace)},IsNullOperator:function(){return b.default.alt(b.default.regexp(/is\s+null/i).result("IS NULL").desc("IS NULL"),b.default.regexp(/is\s+not\s+null/i).result("IS NOT NULL").desc("IS NOT NULL")).notFollowedBy(b.default.regexp(/[a-zA-Z0-9_]/)).skip(b.default.optWhitespace)},NotOperator:function(){return b.default.regexp(/not/i).result("NOT").notFollowedBy(b.default.regexp(/[a-zA-Z0-9_]/)).skip(b.default.optWhitespace).desc("NOT")},AndOperator:function(){return b.default.regexp(/and/i).result("AND").notFollowedBy(b.default.regexp(/[a-zA-Z0-9_]/)).skip(b.default.optWhitespace).desc("AND")},OrOperator:function(){return b.default.regexp(/or/i).result("OR").notFollowedBy(b.default.regexp(/[a-zA-Z0-9_]/)).skip(b.default.optWhitespace).desc("OR")},Parameter:function(e){return b.default.alt(b.default.regexp(/[a-zA-Z0-9_.*-]+/),e.Expression.wrap(b.default.string("{").skip(b.default.optWhitespace),b.default.string("}"))).atLeast(1).map(e=>["PARAM",e.length>1?["||"].concat(e):e[0]]).skip(b.default.optWhitespace).desc("parameter")},StringValueSql:function(){return b.default.regexp(/'([^']*)'/,1).atLeast(1).skip(b.default.optWhitespace).map(e=>e.join("'")).desc("string")},StringValueJs:function(){return b.default.regexp(/"((?:\\.|.)*?)"/,1).skip(b.default.optWhitespace).map(j).desc("string")},NumberValue:function(){return b.default.regexp(/-?(0|[1-9][0-9]*)([.][0-9]+)?([eE][+-]?[0-9]+)?/).notFollowedBy(b.default.regexp(/[a-zA-Z0-9_]/)).skip(b.default.optWhitespace).map(Number).desc("number")},BooleanValue:function(){return b.default.alt(b.default.regexp(/true/i).result(!0).desc("TRUE"),b.default.regexp(/false/i).result(!1).desc("FALSE")).notFollowedBy(b.default.regexp(/[a-zA-Z0-9_]/)).skip(b.default.optWhitespace)},NullValue:function(){return b.default.regexp(/null/i).notFollowedBy(b.default.regexp(/[a-zA-Z0-9_]/)).skip(b.default.optWhitespace).result(null).desc("NULL")},FuncValue:function(e){return b.default.seqMap(b.default.regexp(/([a-zA-Z0-9_]+)/,1).skip(b.default.optWhitespace).desc("function"),e.ExpressionList.wrap(b.default.string("(").skip(b.default.optWhitespace),b.default.string(")").skip(b.default.optWhitespace)),(e,t)=>["FUNC",e.toUpperCase()].concat(t))},WhenPair:function(e){return b.default.seq(b.default.regexp(/when/i).notFollowedBy(b.default.regexp(/[a-zA-Z0-9_]/)).skip(b.default.optWhitespace).desc("WHEN").then(e.Expression),b.default.regexp(/then/i).notFollowedBy(b.default.regexp(/[a-zA-Z0-9_]/)).skip(b.default.optWhitespace).desc("THEN").then(e.Expression))},CaseStatement:function(e){return b.default.seqMap(b.default.regexp(/case/i).result("CASE").notFollowedBy(b.default.regexp(/[a-zA-Z0-9_]/)).skip(b.default.optWhitespace).desc("CASE"),e.WhenPair.many(),b.default.regexp(/else/i).notFollowedBy(b.default.regexp(/[a-zA-Z0-9_]/)).skip(b.default.optWhitespace).desc("ELSE").then(e.Expression).map(e=>[[!0,e]]).fallback(null).skip(b.default.regex(/end/i).notFollowedBy(b.default.regexp(/[a-zA-Z0-9_]/))).skip(b.default.optWhitespace),(...e)=>e.flat(2))},Value:function(e){return b.default.alt(e.NullValue,e.BooleanValue,e.NumberValue,e.StringValueSql,e.StringValueJs,e.FuncValue,e.CaseStatement)},ValueExpression:function(e){return M(b.default.string("||").skip(b.default.optWhitespace),M(b.default.alt(b.default.string("+"),b.default.string("-")).skip(b.default.optWhitespace),M(b.default.alt(b.default.string("*"),b.default.string("/")).skip(b.default.optWhitespace),b.default.alt(e.Value,e.Parameter,e.Expression.wrap(b.default.string("(").skip(b.default.optWhitespace),b.default.string(")").skip(b.default.optWhitespace))))))},Comparison:function(e){return b.default.alt(b.default.seqMap(e.ValueExpression,e.IsNullOperator,(e,t)=>[t,e]),b.default.seqMap(e.ValueExpression,e.ComparisonOperator,e.ValueExpression,(e,t,s)=>[t,e,s]),b.default.seqMap(e.ValueExpression,e.LikeOperator,e.ValueExpression.skip(b.default.regexp(/escape/i).result("ESCAPE").skip(b.default.whitespace).desc("ESCAPE")),e.ValueExpression,(e,t,s,n)=>[t,e,s,n]),b.default.seqMap(e.ValueExpression,e.LikeOperator,e.ValueExpression,(e,t,s)=>[t,e,s]))},ExpressionList:function(e){return e.Expression.sepBy(b.default.string(",").skip(b.default.optWhitespace))},Expression:function(e){return M(e.OrOperator,M(e.AndOperator,(t=e.NotOperator,s=e.Comparison.or(e.ValueExpression),b.default.seq(t,s).or(s)))).trim(b.default.optWhitespace);var t,s}});function F(e){return e?q.Expression.tryParse(e):null}let U=new Map,G=new Map;class V{constructor(e){let t=0,s=0;const n=e.map((e,n)=>{if(Array.isArray(e)){t|=1<<n;return`[${e.map(e=>`${e[0].toString()}:${JSON.stringify(e[1])}`).join(",")}]`}return"*"===e&&(s|=1<<n),e});let a=0;const r=n.map((e,t)=>(a+=e.length)+t);this.segments=e,this.wildcard=s,this.alias=t,this._string=n.join("."),this._stringIndex=r}static parseAlias(e,t){const s=[];for(;t<e.length&&"]"!==e[t];){const{index:n,segments:a}=V.parsePath(e,t);let r=t=n+1;for(;"]"!==e[r]&&","!==e[r];){if('"'===e[r]&&t===r)for(++r;'"'!==e[r]||"\\"===e[r-1];)if(++r>=e.length)throw new Error("Invalid alias expression");if(++r>=e.length)throw new Error("Invalid alias expression")}let i=e.slice(t,r).trim();if(t=r,'"'===i[0])try{i=JSON.parse(i)}catch(e){throw new Error("Invalid alias expression")}s.push([new V(a),i]),","===e[t]&&++t}return s.sort((e,t)=>e[0].toString()>t[0].toString()?1:e[0].toString()<t[0].toString()?-1:e[1]>t[1]?1:e[1]<t[1]?-1:0),Object.freeze(s),{index:t,alias:s}}static parsePath(e,t){const s=[];if(t<e.length&&":"!==e[t])for(;;){if("["===e[t]){const{index:n,alias:a}=V.parseAlias(e,t+1);t=n+1,s.push(a)}else{const n=t;for(;t<e.length&&":"!==e[t]&&"."!==e[t];)++t;const a=e.slice(n,t).trim();if(!a)throw new Error("Invalid parameter path");s.push(a)}if(t>=e.length||":"===e[t])break;if("."!==e[t])throw new Error("Invalid alias expression");++t}return Object.freeze(s),{index:t,segments:s}}static parse(e){let t=U.get(e);if(!t){if(t=G.get(e),!t){const{segments:s}=V.parsePath(e,0);t=new V(s),t.toString()!==e&&U.set(t.toString(),t)}U.set(e,t)}return t}get length(){return this.segments.length}toString(){return this._string}slice(e=0,t=this.segments.length){let s;if(e<0&&(e=Math.max(0,this.segments.length+e)),t<0&&(t=Math.max(0,this.segments.length+t)),e>=t)s="";else{const n=e>0?this._stringIndex[e-1]+1:0,a=t<=this.segments.length?this._stringIndex[t-1]:this._string.length;s=this._string.slice(n,a)}let n=U.get(s);if(!n){if(n=G.get(s),!n){const s=this.segments.slice(e,t);Object.freeze(s),n=new V(s)}U.set(s,n)}return n}concat(e){if(!e._string)return this;if(!this._string)return e;const t=`${this._string}.${e._string}`;let s=U.get(t);if(!s){if(s=G.get(t),!s){const t=this.segments.concat(e.segments);Object.freeze(t),s=new V(t)}U.set(t,s)}return s}stripAlias(){if(!this.alias)return this;const e=this.segments.map(e=>Array.isArray(e)?"*":e),t=e.join(".");let s=U.get(t);return s||(s=G.get(t),s||(Object.freeze(e),s=new V(e)),U.set(t,s)),s}}const W=setInterval(()=>{G=U,U=new Map},12e4);let B,z,J,H,K,X,Z,Y,Q,ee,te,se,ne,ae,re,ie,oe,ce,le;function ue(e,t){if(e.length!==t.length)return!1;for(const[s,n]of e.entries())if(n!==t[s])return!1;return!0}async function fe(){ce&&await(await ce).close()}async function de(e,t,s,n){const a={$set:{},$unset:{},$addToSet:{},$pull:{}};for(const e of t.timestamps.diff()){if(e[0].wildcard!==1<<e[0].length-1)continue;if("Events"===e[0].segments[0]||"DeviceID"===e[0].segments[0]||"Tags"===e[0].segments[0])continue;const s=t.paths.get(e[0].slice(0,-1));e[2]>n&&(e[2]=n),null==e[2]&&null!=e[1]?a.$unset[s.length?s.toString()+"._timestamp":"_timestamp"]=1:!s||s.length&&!t.attributes.has(s)||(a.$set[s.length?s.toString()+"._timestamp":"_timestamp"]=new Date(e[2]))}for(const e of t.attributes.diff()){const t=e[0],s=(((e[1]||{}).value||[])[1]||[])[0],r=(((e[2]||{}).value||[])[1]||[])[0],i=(((e[1]||{}).value||[])[1]||[])[1],o=(((e[2]||{}).value||[])[1]||[])[1],c=((e[1]||{}).value||[])[0],l=((e[2]||{}).value||[])[0],u=((e[1]||{}).object||[])[1],f=((e[2]||{}).object||[])[1],d=((e[2]||{}).writable||[])[1],p=((e[1]||{}).writable||[])[1],m=((e[1]||{}).notification||[])[0],h=((e[2]||{}).notification||[])[0],g=((e[1]||{}).notification||[])[1],w=((e[2]||{}).notification||[])[1],v=((e[1]||{}).accessList||[])[1],b=((e[2]||{}).accessList||[])[1];switch(t.segments[0]){case"Events":if(2===t.length&&r!==s)if(e[2]){const s=new Date(e[2].value[1][0]);switch(t.segments[1]){case"Inform":a.$set._lastInform=s;break;case"1_BOOT":a.$set._lastBoot=s;break;case"0_BOOTSTRAP":a.$set._lastBootstrap=s;break;case"Registered":a.$set._registered=s}}else switch(t.segments[1]){case"Inform":a.$unset._lastInform=1;break;case"1_BOOT":a.$unset._lastBoot=1;break;case"0_BOOTSTRAP":a.$unset._lastBootstrap=1;break;case"Registered":a.$unset._registered=1}break;case"DeviceID":if(r!==s){const s=e[2].value[1][0];switch(t.segments[1]){case"ID":a.$set._id=s;break;case"Manufacturer":a.$set["_deviceId._Manufacturer"]=s;break;case"OUI":a.$set["_deviceId._OUI"]=s;break;case"ProductClass":a.$set["_deviceId._ProductClass"]=s;break;case"SerialNumber":a.$set["_deviceId._SerialNumber"]=s;break;case"MACAddress":a.$set["_deviceId._MacAddress"]=s}}break;case"Tags":r!==s&&(null!=r?(a.$addToSet._tags||(a.$addToSet._tags={$each:[]}),a.$addToSet._tags.$each.push(t.segments[1])):(a.$pull._tags||(a.$pull._tags={$in:[]}),a.$pull._tags.$in.push(t.segments[1])));break;default:if(!e[2]){a.$unset[t.toString()]=1;continue}for(const y of Object.keys(e[2]))if(e[2][y][0]>n&&(e[2][y][0]=n),null!=e[2][y][1])switch(y){case"value":r!==s&&("xsd:dateTime"===o&&Number.isInteger(r)?a.$set[t.toString()+"._value"]=new Date(r):a.$set[t.toString()+"._value"]=r),o!==i&&(a.$set[t.toString()+"._type"]=o),l!==c&&(a.$set[t.toString()+"._timestamp"]=new Date(l));break;case"object":e[1]&&e[1].object&&f===u||(a.$set[t.length?t.toString()+"._object":"_object"]=!!f);break;case"writable":e[1]&&e[1].writable&&d===p||(a.$set[t.length?t.toString()+"._writable":"_writable"]=!!d);break;case"notification":e[1]&&e[1].notification&&w===g||(a.$set[t.length?t.toString()+"._notification":"_notification"]=w),h!==m&&(a.$set[t.toString()+"._attributesTimestamp"]=new Date(h));break;case"accessList":e[1]&&e[1].accessList&&ue(b,v)||(a.$set[t.length?t.toString()+"._accessList":"_accessList"]=b),h!==m&&(a.$set[t.toString()+"._attributesTimestamp"]=new Date(h))}if(e[1])for(const s of Object.keys(e[1]))if(!(null==e[1][s][1]||e[2]&&e[2][s]&&null!=e[2][s][1])){const e=t.length?t.toString()+".":"";a.$unset[`${e}_${s}`]=1,"value"===s?(a.$unset[e+"_type"]=1,a.$unset[e+"_timestamp"]=1):"notification"===s?null==b&&(a.$unset[e+"_attributesTimestamp"]=1):"accessList"===s&&null==w&&(a.$unset[e+"_attributesTimestamp"]=1)}}}a.$unset=function(e){if(e[""])return{"":e[""]};const t=Object.keys(e).sort();if(t.length<=1)return e;for(let s=1;s<t.length;++s){const n=t[s-1],a=t[s];a.startsWith(n)&&("."!==a.charAt(n.length)&&"."!==a.charAt(n.length-1)||(delete e[a],t.splice(s--,1)))}return e}(a.$unset);for(const e of Object.keys(a.$unset))null!=a.$set[e]&&delete a.$unset[e];for(const[e,t]of Object.entries(a)){if("$addToSet"===e)for(const[e,s]of Object.entries(t))s.$each.length||delete t[e];else if("$pull"===e)for(const[e,s]of Object.entries(t))s.$in.length||delete t[e];Object.keys(t).length||delete a[e]}if(!Object.keys(a).length)return;let r;a.$addToSet&&a.$pull&&(r={$pull:a.$pull},delete a.$pull);if(1!==(await z.updateOne({_id:e},a,{upsert:s})).result.n)throw new Error(`Device ${e} not found in database`);r&&await z.updateOne({_id:e},r)}async function pe(e){const t=await Z.find({_id:{$regex:`^${P(e)}\\:`}}).toArray(),s={};for(const n of t){const t=n._id.slice(e.length+1);delete n._id,delete n.channel,delete n.device,n.timestamp=+n.timestamp,n.provisions=JSON.parse(n.provisions),s[t]=n}return s}async function me(e,t,s){const n=`${e}:${t}`,a=Object.assign({},s);a._id=n,a.device=e,a.channel=t,a.timestamp=new Date(s.timestamp),a.provisions=JSON.stringify(s.provisions),await Z.replaceOne({_id:n},a,{upsert:!0})}async function he(e,t){await Z.deleteOne({_id:`${e}:${t}`})}async function ge(e,t){const s=B.find({device:e}).sort({timestamp:1}),a=[];for await(const e of s){if(e.timestamp&&(e.timestamp=+e.timestamp),e.expiry&&(e.expiry=+e.expiry),e.timestamp>=t)return[a,+e.timestamp];if(e._id=String(e._id),a.push(e),"download"===e.name&&e.file){let t;t=n.ObjectID.isValid(e.file)?{_id:{$in:[e.file,new n.ObjectID(e.file)]}}:{_id:e.file};const s=await Y.find(t).toArray();s[0]&&(e.fileType||(e.fileType=s[0].metadata.fileType),e.fileName||(e.fileName=s[0].filename||s[0]._id.toString()))}}return[a,null]}async function we(e){const t=await Q.find({_id:{$regex:`^${P(e)}\\:`}}).toArray(),s={};for(const n of t){const t=n._id.slice(e.length+1);delete n._id,"string"==typeof n.provisions?(n.timestamp=+n.timestamp,n.args&&(n.args=JSON.parse(n.args)),n.provisions=JSON.parse(n.provisions),n.retries=JSON.parse(n.retries),s[t]=n):s[t]=n}return s}async function ve(e,t,s){const n=`${e}:${t}`,a=Object.assign({},s);a._id=n,a.timestamp=new Date(s.timestamp),a.provisions=JSON.stringify(s.provisions),a.retries=JSON.stringify(s.retries),a.args=JSON.stringify(s.args),await Q.replaceOne({_id:n},a,{upsert:!0})}async function be(e,t){await Q.deleteOne({_id:`${e}:${t}`})}W.unref&&W.unref();const ye=""+L("FORWARDED_HEADER"),Se=new WeakMap,_e=[];for(const e of ye.split(",").map(e=>e.trim()))try{_e.push(r.parseCIDR(e))}catch(t){try{const t=r.parse(e);_e.push([t,8*t.toByteArray().length])}catch(e){}}function De(e){let t=Se.get(e);if(!t){const s=e.socket;t={localAddress:s.localAddress,localPort:s.localPort,remoteAddress:s.remoteAddress,remotePort:s.remotePort,host:e.headers.host,encrypted:!!e.socket.encrypted};const n=e.headers.forwarded;if(n){const e=r.parse(s.remoteAddress);if(_e.some(t=>e.match(t))){const e=function(e){e=e.toLowerCase();const t={};let s,n=0,a=-1;for(let r=0;r<e.length;++r){const i=e.charCodeAt(r);if(61===i)n>=0&&(s=e.slice(n,r).trim(),n=-1,a=r+1);else if(59===i)a>=0&&(t[s]=e.slice(a,r).trim()),a=-1,n=r+1;else{if(44===i)return a>=0&&(t[s]=e.slice(a,r).trim()),t;if(34===i&&a>=0){const i=r;if(!e.slice(a,i).trim())for(r+=1;r<e.length;++r){const o=e.charCodeAt(r);if(92===o&&++r,34===o){t[s]=JSON.parse(e.slice(i,r+1).trim()),a=-1,n=r+1;break}}}}}return a>=0&&(t[s]=e.slice(a).trim()),t}(n);if("https"===e.proto?(t.encrypted=!0,t.localPort=443):"http"===e.proto&&(t.encrypted=!1,t.localPort=80),e.host){t.host=e.host;const[,s]=e.host.split(":",2);t.localPort=+s||t.localPort}if(e.for)if(e.for.startsWith("[")){const s=e.for.lastIndexOf("]");s>=0&&(t.remoteAddress=e.for.slice(1,s),t.remotePort=parseInt(e.for.slice(s+2))||t.remotePort)}else{const s=e.for.lastIndexOf(":");s>=0?(t.remoteAddress=e.for.slice(0,s),t.remotePort=parseInt(e.for.slice(s+1))||t.remotePort):t.remoteAddress=e.for}if(e.by)if(e.by.startsWith("[")){const s=e.by.lastIndexOf("]");s>=0&&(t.localAddress=e.by.slice(1,s),t.localPort=parseInt(e.by.slice(s+2))||t.localPort)}else{const s=e.by.lastIndexOf(":");s>=0?(t.localAddress=e.by.slice(0,s),t.localPort=parseInt(e.by.slice(s+1))||t.localPort):t.localAddress=e.by}}}Se.set(e,t)}return t}const Oe=L("LOG_FORMAT"),Re=L("ACCESS_LOG_FORMAT")||Oe,xe={};let Ae,Te,Ee=!1,Ie=!1,Ne=t.createWriteStream(null,{fd:process.stderr.fd}),Ce=t.fstatSync(Ne.fd),ke=t.createWriteStream(null,{fd:process.stdout.fd}),Le=t.fstatSync(ke.fd);function Pe(){let e=1;Ae&&(++e,t.stat(Ae,(s,n)=>{if(s&&!s.message.startsWith("ENOENT:"))throw s;n&&n.dev===Ce.dev&&n.ino===Ce.ino||(Ne.end(),Ne=t.createWriteStream(null,{fd:t.openSync(Ae,"a")}),Ce=t.fstatSync(Ne.fd)),0==--e&&setTimeout(Pe,6e4-Date.now()%6e4).unref()})),Te&&(++e,t.stat(Te,(s,n)=>{if(s&&!s.message.startsWith("ENOENT:"))throw s;n&&n.dev===Le.dev&&n.ino===Le.ino||(ke.end(),ke=t.createWriteStream(null,{fd:t.openSync(Te,"a")}),Le=t.fstatSync(ke.fd)),0==--e&&setTimeout(Pe,6e4-Date.now()%6e4).unref()})),0==--e&&setTimeout(Pe,6e4-Date.now()%6e4).unref()}function je(e){if(e.sessionContext){const t=e.sessionContext;e.deviceId=t.deviceId,e.remoteAddress=De(t.httpRequest).remoteAddress,delete e.sessionContext}if(e.exception){const t=e.exception;e.exceptionName=t.name,e.exceptionMessage=t.message,e.exceptionStack=t.stack,delete e.exception}if(e.task&&(e.taskId=e.task._id,delete e.task),e.rpc){const t=e.rpc;t.acsRequest?(e.acsRequestId=t.id,e.acsRequestName=t.acsRequest.name,t.acsRequest.commandKey&&(e.acsRequestCommandKey=t.acsRequest.commandKey)):t.cpeRequest?(e.cpeRequestId=t.id,"Inform"===t.cpeRequest.name?(e.informEvent=t.cpeRequest.event.join(","),e.informRetryCount=t.cpeRequest.retryCount):(e.cpeRequestName=t.cpeRequest.name,t.cpeRequest.commandKey&&(e.cpeRequestCommandKey=t.cpeRequest.commandKey))):t.cpeFault&&(e.acsRequestId=t.id,e.cpeFaultCode=t.cpeFault.detail.faultCode,e.cpeFaultString=t.cpeFault.detail.faultString),delete e.rpc}if(e.fault){const t=e.fault;e.faultCode=t.code,e.faultMessage=t.message,delete e.fault}e.context&&(e.remoteAddress=De(e.context.req).remoteAddress,e.context.state.user&&(e.user=e.context.state.user.username),delete e.context),e.userInfo&&(e.remoteAddress=e.userInfo.remoteAddress,e.userInfo.username&&(e.user=e.userInfo.username),delete e.userInfo);for(const[t,s]of Object.entries(e))null==s&&delete e[t];return e}function $e(e,t){if(t){let t="";return"info"===e.severity?t="<6>":"warn"===e.severity?t="<4>":"error"===e.severity&&(t="<3>"),`${t}${JSON.stringify(je(e))}${s.EOL}`}return`${JSON.stringify(je(e))}${s.EOL}`}function Me(e,t){const n={user:!0,remoteAddress:!0,severity:!0,timestamp:!0,message:!0,deviceId:!!e.sessionContext};je(e);let a="";e.remoteAddress&&(a=e.deviceId&&n.deviceId?`${e.remoteAddress} ${e.deviceId}: `:e.user?`${e.user}@${e.remoteAddress}: `:e.remoteAddress+": ");const r=Object.keys(e);let i="";const o=[];for(const t of r)n[t]||o.push(`${t}=${JSON.stringify(e[t])}`);if(o.length&&(i="; "+o.join(" ")),t){let t="";return"info"===e.severity?t="<6>":"warn"===e.severity?t="<4>":"error"===e.severity&&(t="<3>"),`${t}${a}${e.message}${i}${s.EOL}`}return`${e.timestamp} [${e.severity.toUpperCase()}] ${a}${e.message}${i}${s.EOL}`}function qe(e){if(e.timestamp=(new Date).toISOString(),"json"===Oe){let t=$e(e=Object.assign({},xe,e),Ee);Ne.write(t)}else Ne.write(Me(e,Ee))}function Fe(e){e.severity="info",qe(e)}function Ue(e){e.severity="warn",qe(e)}function Ge(e){e.severity="error",qe(e)}function Ve(e){if(e.timestamp=(new Date).toISOString(),"json"===Re){Object.assign(e,xe);let t=$e(e,Ie);ke.write(t);try{t=JSON.parse(t),t.createdAt=new Date,ie.insertOne(t)}catch(e){console.log(e)}}else ke.write(Me(e,Ie))}function We(e){e.severity="info",Ve(e)}function Be(e){e.severity="warn",Ve(e)}function ze(e){e.severity="error",Ve(e)}let Je=0,He=[];function Ke(){const e=y.default.fork();return e.on("error",t=>{if("EPIPE"!==t.code)throw t;setTimeout(()=>{if(!e.isDead())throw t},50)}),e}function Xe(e,t,s){const n={message:"Worker died",pid:e.process.pid,exitCode:null,signal:null};null!=t&&(n.exitCode=t),null!=s&&(n.signal=s),Ge(n);const a=Date.now();He.push(a);let r=0,i=0,o=0;if(He=He.filter(e=>{if(e>a-6e4)++r;else if(e>a-12e4)++i;else{if(!(e>a-18e4))return!1;++o}return!0}),r>5&&i>5&&o>5){process.exitCode=1,y.default.removeListener("exit",Xe);for(const e in y.default.workers)y.default.workers[e].kill();Ge({message:"Too many crashes, exiting",pid:process.pid})}else Je=Math.max(a,Je+2e3),Je!==a?setTimeout(()=>{process.exitCode||Ke()},Je-a):Ke()}function Ze(){y.default.removeListener("exit",Xe);for(const e in y.default.workers)y.default.workers[e].kill()}const Ye=y.default.worker;let Qe,et;function tt(){return new Promise((e,t)=>{var s,n;setTimeout(()=>{t(new Error("Could not close server in a timely manner"))},3e4).unref(),s=2e4,n=e,Qe?(setTimeout(()=>{if(!n)return;Qe.removeListener("request",et),Qe.setTimeout(1);const e=n;n=null,setTimeout(e,1e3)},s).unref(),Qe.close(()=>{if(!n)return;const e=n;n=null,setTimeout(e,50)})):n()})}function st(e){const t=(e=e.trim()).split(" ",1)[0],s={method:t};if("Basic"===t){const n=/^([^:]*):(.*)$/.exec(Buffer.from(e.slice(t.length+1),"base64").toString());if(!n)throw new Error("Unable to parse auth header");s.username=n[1],s.password=n[2]}else"Digest"===t&&Object.assign(s,function(e){const t={},s=e.split(",");let n;for(;null!=(n=s.shift());){const e=n.split("=",1)[0];if(e.length===n.length){if(!n.trim())continue;throw new Error("Unable to parse auth header")}let a=n.slice(e.length+1);if(/^\s*"/.test(a)){for(;!/[^\\]"\s*$/.test(a);){const e=s.shift();if(null==e)throw new Error("Unable to parse auth header");a+=","+e}try{a=JSON.parse(a)}catch(e){throw new Error("Unable to parse auth header")}}else a=a.trim();t[e.trim()]=a}return t}(e.slice(t.length+1)));return s}function nt(e){const t=[],s=e.length;let n=0,a="",r="",i="",o=0,c=0;for(let l=0;l<s;++l){const s=e.charCodeAt(l);switch(s){case 39:case 34:if(n===s){if(n=0,a){const s={name:a,namespace:r,localName:i,value:e.slice(o+1,l)};t.push(s),a="",o=l+1}}else n=s,o=l;continue;case 58:o>=c&&(c=l);continue;case 61:if(a)throw new Error("Unexpected character at "+l);a=e.slice(o,l).trim(),c>o?(r=e.slice(o,c).trim(),i=e.slice(c+1,l).trim()):(r="",i=a)}}if(a)throw new Error("Attribute must have value at "+o);const l=e.slice(o);if(l.trim())throw new Error("Unexpected string at "+(s-l.length));return t}function at(e){return e.replace(/&[0-9a-z#]+;/gi,e=>{switch(e){case"&quot;":return'"';case"&amp;":return"&";case"&apos;":return"'";case"&lt;":return"<";case"&gt;":return">";default:if(e.startsWith("&#x")){const t=e.slice(3,-1).toLowerCase(),s=parseInt(t,16);if(t.endsWith(s.toString(16)))return String.fromCharCode(s)}else if(e.startsWith("&#")){const t=e.slice(2,-1),s=parseInt(t);if(t.endsWith(s.toString()))return String.fromCharCode(s)}}return e})}function rt(e){const t={"&":"&amp;",'"':"&quot;","'":"&apos;","<":"&lt;",">":"&gt;"};return e.replace(/[&"'<>]/g,e=>t[e])}let it=new Map,ot=new Map;const ct=new WeakMap;function lt(e){if(null===e)return"null";if(void 0===e)return"undefined";const t=typeof e;if("number"===t||"boolean"===t||"string"===t)return`${t}:${e}`;if("function"!==t&&"object"!==t)throw new Error(`Cannot memoize ${t} arguments`);let s=ct.get(e);if(!s){s=`${t}:${Math.trunc(Math.random()*Number.MAX_SAFE_INTEGER).toString(36)}`,ct.set(e,s)}return s}function ut(e){const t=lt(e);return(...s)=>{const n=JSON.stringify(s.map(lt))+t;if(it.has(n))return it.get(n);let a;return a=ot.has(n)?ot.get(n):e(...s),it.set(n,a),a}}const ft=setInterval(()=>{ot=it,it=new Map},12e4);ft.unref&&ft.unref();const dt="1.0.0+20210106062213",pt={"soap-enc":"http://schemas.xmlsoap.org/soap/encoding/","soap-env":"http://schemas.xmlsoap.org/soap/envelope/",xsd:"http://www.w3.org/2001/XMLSchema",xsi:"http://www.w3.org/2001/XMLSchema-instance",cwmp:"urn:dslforum-org:cwmp-1-0"},mt={"soap-enc":"http://schemas.xmlsoap.org/soap/encoding/","soap-env":"http://schemas.xmlsoap.org/soap/envelope/",xsd:"http://www.w3.org/2001/XMLSchema",xsi:"http://www.w3.org/2001/XMLSchema-instance",cwmp:"urn:dslforum-org:cwmp-1-1"},ht={"soap-enc":"http://schemas.xmlsoap.org/soap/encoding/","soap-env":"http://schemas.xmlsoap.org/soap/envelope/",xsd:"http://www.w3.org/2001/XMLSchema",xsi:"http://www.w3.org/2001/XMLSchema-instance",cwmp:"urn:dslforum-org:cwmp-1-2"},gt={"soap-enc":"http://schemas.xmlsoap.org/soap/encoding/","soap-env":"http://schemas.xmlsoap.org/soap/envelope/",xsd:"http://www.w3.org/2001/XMLSchema",xsi:"http://www.w3.org/2001/XMLSchema-instance",cwmp:"urn:dslforum-org:cwmp-1-2"},wt={"soap-enc":"http://schemas.xmlsoap.org/soap/encoding/","soap-env":"http://schemas.xmlsoap.org/soap/envelope/",xsd:"http://www.w3.org/2001/XMLSchema",xsi:"http://www.w3.org/2001/XMLSchema-instance",cwmp:"urn:dslforum-org:cwmp-1-3"};let vt;const bt=ut(nt);function yt(e){return"true"===e||"1"===e||"false"!==e&&"0"!==e&&null}function St(e){return e.children.filter(e=>"EventStruct"===e.localName).map(e=>e.children.find(e=>"EventCode"===e.localName).text)}function _t(e){return e.children.filter(e=>"ParameterInfoStruct"===e.localName).map(e=>{let t,s;for(const n of e.children)switch(n.localName){case"Name":t=n.text;break;case"Writable":s=n.text}let n=yt(s);return null==n&&(vt.push({message:"Invalid writable attribute",parameter:t}),n=!1),t&&!t.endsWith(".")?[V.parse(t),!1,n]:[V.parse(t.slice(0,-1)),!0,n]})}const Dt=ut(e=>{const t=nt(e);for(const e of t)if("type"===e.localName)return e.value;return null});function Ot(e){return e.children.filter(e=>"ParameterValueStruct"===e.localName).map(e=>{let t,s;for(const n of e.children)switch(n.localName){case"Name":s=n.text;break;case"Value":t=n}let n=Dt(t.attrs);n||(vt.push({message:"Invalid value type attribute",parameter:s}),n="xsd:string");const a=at(t.text);let r=a;return"xsd:boolean"===n?(r=yt(a),null==r&&(vt.push({message:"Invalid value attribute",parameter:s}),r=a)):"xsd:int"===n||"xsd:unsignedInt"===n?(r=parseInt(a),isNaN(r)&&(vt.push({message:"Invalid value attribute",parameter:s}),r=a)):"xsd:dateTime"===n&&(r=Date.parse(a),isNaN(r)&&(vt.push({message:"Invalid value attribute",parameter:s}),r=a)),[V.parse(s),r,n]})}function Rt(e){return e.children.filter(e=>"ParameterAttributeStruct"===e.localName).map(e=>{let t,s,n;for(const a of e.children)switch(a.localName){case"Name":n=a.text;break;case"Notification":t=a;break;case"AccessList":s=a}let a=parseInt(t.text);isNaN(a)&&(vt.push({message:"Invalid notification attribute",parameter:n}),a=0);const r=s.children.filter(e=>"string"===e.localName).map(e=>at(e.text));return[V.parse(n),a,r]})}function xt(e){let t,s,n,a,r,i;for(const o of e.children)switch(o.localName){case"FaultCode":t=o.text;break;case"FaultString":s=at(o.text);break;case"SetParameterValuesFault":n=n||[];for(const e of o.children)switch(e.localName){case"ParameterName":a=e.text;break;case"FaultCode":r=e.text;break;case"FaultString":i=at(e.text)}n.push({parameterName:a,faultCode:r,faultString:i})}return{faultCode:t,faultString:s,setParameterValuesFault:n}}function At(e,t,s){vt=s;const n={id:null,cwmpVersion:t,sessionTimeout:null,cpeRequest:null,cpeFault:null,cpeResponse:null};if(!e.length)return n;const a=function(e){const t=e.length;let s=0,n=0,a=0,r=0;const i={name:"root",namespace:"",localName:"root",attrs:"",text:"",bodyIndex:0,children:[]},o=[i];for(let i=0;i<t;++i)switch(e.charCodeAt(i)){case 39:switch(255&s){case 2:s=a,n=r,a=0;continue;case 1:a=s,r=n,s=2,n=i;continue}continue;case 34:switch(255&s){case 3:s=a,n=r,a=0;continue;case 1:a=s,r=n,s=3,n=i;continue}continue;case 60:0==(255&s)&&(a=s,r=n,s=1,n=i);continue;case 58:1==(255&s)&&0==(s>>8&255)&&(s^=(i-n&255)<<8);continue;case 32:case 9:case 13:case 10:1==(255&s)&&0==(s>>16&255)&&(s^=(i-n&255)<<16);continue;case 62:if(1==(255&s)){const t=s>>16&255;let c,l,u,f,d,p,m;switch(e.charCodeAt(n+1)){case 47:if(u=o.pop(),c=0===t?e.slice(n+2,i):e.slice(n+2,n+t),u.name!==c)throw new Error("Unmatched closing tag at "+i);u.children.length||(u.text=e.slice(u.bodyIndex,n)),s=a,n=r,a=0;continue;case 33:if(e.startsWith("![CDATA[",n+1)){if(e.endsWith("]]",i))throw new Error("CDATA nodes are not supported at "+i)}else e.startsWith("!--",n+1)&&e.endsWith("--",i)&&(s=a,n=r,a=0);continue;case 63:63===e.charCodeAt(i-1)&&(s=a,n=r,a=0);continue;default:d=+(47===e.charCodeAt(i-1)),f=o[o.length-1],l=s>>8&255,c=0===t?e.slice(n+1,i-d):e.slice(n+1,n+t),l&&(!t||l<t)?(p=c.slice(l),m=c.slice(0,l-1)):(p=c,m=""),u={name:c,namespace:m,localName:p,attrs:t?e.slice(n+t+1,i-d):"",text:"",bodyIndex:i+1,children:[]},f.children.push(u),d||o.push(u),s=a,n=r,a=0;continue}}continue}if(s)throw new Error("Unclosed token at "+n);if(o.length>1){const e=o[o.length-1];throw new Error("Unclosed XML element at "+e.bodyIndex)}return i.children.length||(i.text=e),i}(e);if(!a.children.length)return n;const r=a.children[0];let i,o;for(const e of r.children)switch(e.localName){case"Header":i=e;break;case"Body":o=e}if(i)for(const e of i.children)switch(e.localName){case"ID":n.id=at(e.text);break;case"sessionTimeout":n.sessionTimeout=parseInt(e.text)}const c=o.children[0];if(!n.cwmpVersion&&"Fault"!==c.localName){let e,t;for(const s of[c,o,r])if(e=e||s.namespace,s.attrs){const n=bt(s.attrs),a=e?n.find(t=>"xmlns"===t.namespace&&t.localName===e):n.find(e=>"xmlns"===e.name);a&&(t=a.value)}switch(t){case"urn:dslforum-org:cwmp-1-0":n.cwmpVersion="1.0";break;case"urn:dslforum-org:cwmp-1-1":n.cwmpVersion="1.1";break;case"urn:dslforum-org:cwmp-1-2":n.sessionTimeout?n.cwmpVersion="1.3":n.cwmpVersion="1.2";break;case"urn:dslforum-org:cwmp-1-3":n.cwmpVersion="1.4";break;default:throw new Error("Unrecognized CWMP version")}}switch(c.localName){case"Inform":n.cpeRequest=function(e){let t,s,n;const a={Manufacturer:null,OUI:null,ProductClass:null,SerialNumber:null};for(const r of e.children)switch(r.localName){case"ParameterList":n=Ot(r);break;case"DeviceId":for(const e of r.children){const t=e.localName;t in a&&(a[t]=at(e.text))}break;case"Event":s=St(r);break;case"RetryCount":t=parseInt(r.text)}return{name:"Inform",parameterList:n,deviceId:a,event:s,retryCount:t}}(c);break;case"GetRPCMethods":n.cpeRequest={name:"GetRPCMethods"};break;case"TransferComplete":n.cpeRequest=function(e){let t,s,n,a;for(const r of e.children)switch(r.localName){case"CommandKey":t=r.text;break;case"FaultStruct":s=xt(r);break;case"StartTime":n=Date.parse(r.text);break;case"CompleteTime":a=Date.parse(r.text)}return{name:"TransferComplete",commandKey:t,faultStruct:s,startTime:n,completeTime:a}}(c);break;case"RequestDownload":n.cpeRequest=function(e){return{name:"RequestDownload",fileType:e.children.find(e=>"FileType"===e.localName).text}}(c);break;case"GetParameterNamesResponse":n.cpeResponse=function(e){return{name:"GetParameterNamesResponse",parameterList:_t(e.children.find(e=>"ParameterList"===e.localName))}}(c);break;case"GetParameterValuesResponse":n.cpeResponse=function(e){return{name:"GetParameterValuesResponse",parameterList:Ot(e.children.find(e=>"ParameterList"===e.localName))}}(c);break;case"GetParameterAttributesResponse":n.cpeResponse=function(e){return{name:"GetParameterAttributesResponse",parameterList:Rt(e.children.find(e=>"ParameterList"===e.localName))}}(c);break;case"SetParameterValuesResponse":n.cpeResponse=function(e){let t;for(const s of e.children)switch(s.localName){case"Status":t=parseInt(s.text)}return t>=0||(vt.push({message:"Invalid SetParameterValuesResponse status"}),t=0),{name:"SetParameterValuesResponse",status:t}}(c);break;case"SetParameterAttributesResponse":n.cpeResponse={name:"SetParameterAttributesResponse"};break;case"AddObjectResponse":n.cpeResponse=function(e){let t,s;for(const n of e.children)switch(n.localName){case"InstanceNumber":t=n.text;break;case"Status":s=parseInt(n.text)}return s>=0||(vt.push({message:"Invalid AddObjectResponse status"}),s=0),{name:"AddObjectResponse",instanceNumber:t,status:s}}(c);break;case"DeleteObjectResponse":n.cpeResponse=function(e){let t;for(const s of e.children)switch(s.localName){case"Status":t=parseInt(s.text)}return t>=0||(vt.push({message:"Invalid DeleteObjectResponse status"}),t=0),{name:"DeleteObjectResponse",status:t}}(c);break;case"RebootResponse":n.cpeResponse={name:"RebootResponse"};break;case"FactoryResetResponse":n.cpeResponse={name:"FactoryResetResponse"};break;case"DownloadResponse":n.cpeResponse=function(e){let t,s,n;for(const a of e.children)switch(a.localName){case"Status":t=parseInt(a.text);break;case"StartTime":s=Date.parse(a.text);break;case"CompleteTime":n=Date.parse(a.text)}return t>=0||(vt.push({message:"Invalid DownloadResponse status"}),t=0),{name:"DownloadResponse",status:t,startTime:s,completeTime:n}}(c);break;case"Fault":n.cpeFault=function(e){let t,s,n;for(const a of e.children)switch(a.localName){case"faultcode":t=a.text;break;case"faultstring":s=at(a.text);break;case"detail":n=xt(a.children.find(e=>"Fault"===e.localName))}return{faultCode:t,faultString:s,detail:n}}(c);break;default:throw new Error("8000 Method not supported "+c.localName)}return n}const Tt={"1.0":Object.entries(pt).map(([e,t])=>`xmlns:${e}="${t}"`).join(" "),1.1:Object.entries(mt).map(([e,t])=>`xmlns:${e}="${t}"`).join(" "),1.2:Object.entries(ht).map(([e,t])=>`xmlns:${e}="${t}"`).join(" "),1.3:Object.entries(gt).map(([e,t])=>`xmlns:${e}="${t}"`).join(" "),1.4:Object.entries(wt).map(([e,t])=>`xmlns:${e}="${t}"`).join(" ")};function Et(e){const t={Server:"GenieACS/1.0.0+20210106062213",SOAPServer:"GenieACS/1.0.0+20210106062213"};if(!e)return{code:204,headers:t,data:""};let s;if(e.acsResponse)switch(e.acsResponse.name){case"InformResponse":s="<cwmp:InformResponse><MaxEnvelopes>1</MaxEnvelopes></cwmp:InformResponse>";break;case"GetRPCMethodsResponse":s=`<cwmp:GetRPCMethodsResponse><MethodList soap-enc:arrayType="xsd:string[${(a=e.acsResponse).methodList.length}]">${a.methodList.map(e=>`<string>${e}</string>`).join("")}</MethodList></cwmp:GetRPCMethodsResponse>`;break;case"TransferCompleteResponse":s="<cwmp:TransferCompleteResponse></cwmp:TransferCompleteResponse>";break;case"RequestDownloadResponse":s="<cwmp:RequestDownloadResponse></cwmp:RequestDownloadResponse>";break;default:throw new Error("Unknown method response type "+e.acsResponse.name)}else if(e.acsRequest)switch(e.acsRequest.name){case"GetParameterNames":s=`<cwmp:GetParameterNames><ParameterPath>${(n=e.acsRequest).parameterPath}</ParameterPath><NextLevel>${+n.nextLevel}</NextLevel></cwmp:GetParameterNames>`;break;case"GetParameterValues":s=function(e){return`<cwmp:GetParameterValues><ParameterNames soap-enc:arrayType="xsd:string[${e.parameterNames.length}]">${e.parameterNames.map(e=>`<string>${e}</string>`).join("")}</ParameterNames></cwmp:GetParameterValues>`}(e.acsRequest);break;case"GetParameterAttributes":s=function(e){return`<cwmp:GetParameterAttributes><ParameterNames soap-enc:arrayType="xsd:string[${e.parameterNames.length}]">${e.parameterNames.map(e=>`<string>${e}</string>`).join("")}</ParameterNames></cwmp:GetParameterAttributes>`}(e.acsRequest);break;case"SetParameterValues":s=function(e){const t=e.parameterList.map(t=>{let s=t[1];return"xsd:dateTime"===t[2]&&"number"==typeof s&&(s=new Date(s).toISOString(),!1===e.DATETIME_MILLISECONDS&&(s=s.replace(".000",""))),"xsd:boolean"===t[2]&&"boolean"==typeof s&&!1===e.BOOLEAN_LITERAL&&(s=+s),`<ParameterValueStruct><Name>${t[0]}</Name><Value xsi:type="${t[2]}">${rt(""+s)}</Value></ParameterValueStruct>`});return`<cwmp:SetParameterValues><ParameterList soap-enc:arrayType="cwmp:ParameterValueStruct[${e.parameterList.length}]">${t.join("")}</ParameterList><ParameterKey>${e.parameterKey||""}</ParameterKey></cwmp:SetParameterValues>`}(e.acsRequest);break;case"SetParameterAttributes":s=function(e){const t=e.parameterList.map(e=>`<SetParameterAttributesStruct><Name>${e[0]}</Name><NotificationChange>${null==e[1]?"false":"true"}</NotificationChange><Notification>${null==e[1]?"":e[1]}</Notification><AccessListChange>${null==e[2]?"false":"true"}</AccessListChange><AccessList soap-enc:arrayType="xsd:string[${(e[2]||[]).length}]">${null==e[2]?"":e[2].map(e=>`<string>${rt(e)}</string>`).join("")}</AccessList></SetParameterAttributesStruct>`);return`<cwmp:SetParameterAttributes><ParameterList soap-enc:arrayType="cwmp:SetParameterAttributesStruct[${e.parameterList.length}]">${t.join("")}</ParameterList></cwmp:SetParameterAttributes>`}(e.acsRequest);break;case"AddObject":s=function(e){return`<cwmp:AddObject><ObjectName>${e.objectName}</ObjectName><ParameterKey>${e.parameterKey||""}</ParameterKey></cwmp:AddObject>`}(e.acsRequest);break;case"DeleteObject":s=function(e){return`<cwmp:DeleteObject><ObjectName>${e.objectName}</ObjectName><ParameterKey>${e.parameterKey||""}</ParameterKey></cwmp:DeleteObject>`}(e.acsRequest);break;case"Reboot":s=function(e){return`<cwmp:Reboot><CommandKey>${e.commandKey||""}</CommandKey></cwmp:Reboot>`}(e.acsRequest);break;case"FactoryReset":s="<cwmp:FactoryReset></cwmp:FactoryReset>";break;case"Download":s=function(e){return`<cwmp:Download><CommandKey>${e.commandKey||""}</CommandKey><FileType>${e.fileType}</FileType><URL>${e.url}</URL><Username>${rt(e.username||"")}</Username><Password>${rt(e.password||"")}</Password><FileSize>${e.fileSize||"0"}</FileSize><TargetFileName>${rt(e.targetFileName||"")}</TargetFileName><DelaySeconds>${e.delaySeconds||"0"}</DelaySeconds><SuccessURL>${rt(e.successUrl||"")}</SuccessURL><FailureURL>${rt(e.failureUrl||"")}</FailureURL></cwmp:Download>`}(e.acsRequest);break;default:throw new Error("Unknown method request "+e.acsRequest.name)}var n,a;return t["Content-Type"]='text/xml; charset="utf-8"',{code:200,headers:t,data:`<?xml version="1.0" encoding="UTF-8"?>\n<soap-env:Envelope ${Tt[e.cwmpVersion]}><soap-env:Header><cwmp:ID soap-env:mustUnderstand="1">${e.id}</cwmp:ID></soap-env:Header><soap-env:Body>${s}</soap-env:Body></soap-env:Envelope>`}}const It={object:2,writable:4,value:8,notification:16,accessList:32};function Nt(e){if(null!=e[0])switch(e[1]){case"xsd:boolean":if("boolean"!=typeof e[0]){const s="true"==(t=""+(t=e[0]))||"TRUE"===t||"True"===t||"1"===t||"false"!==t&&"FALSE"!==t&&"False"!==t&&"0"!==t&&null;e[0]=null==s?""+e[0]:s}break;case"xsd:string":case"xsd:base64":case"xsd:hexBinary":"string"!=typeof e[0]&&(e[0]=""+e[0]);break;case"xsd:int":case"xsd:unsignedInt":if("number"!=typeof e[0]){const t=parseInt(e[0]);isNaN(t)?e[0]=""+e[0]:e[0]=t}break;case"xsd:dateTime":if("number"!=typeof e[0]){let t=+e[0];isNaN(t)?(t=Date.parse(e[0]),isNaN(t)?e[0]=""+e[0]:e[0]=t):e[0]=t}break;default:e[0]=JSON.parse(JSON.stringify(e[0]))}var t;return e}function Ct(e,t,s=null){const n=e.stripAlias();let a=[{path:n,pathGet:t,pathSet:null,attrGet:s,attrSet:null,defer:!0}];if(e.alias)for(const[s,r]of e.segments.entries())if(Array.isArray(r)){const e=n.slice(0,s+1);for(const[s]of r)a=a.concat(Ct(e.concat(s),t,{value:t}))}return a}function kt(e,t,s){let n=[];if(t.alias){const a=t.stripAlias();for(const t of e.paths.find(a,!1,!0))e.attributes.has(t,s)&&n.push(t);for(let r=t.length-1;r>=0;--r)if(t.alias&1<<r)for(const[i,o]of t.segments[r]){const t=kt(e,a.slice(0,r+1).concat(i),s),c=[];for(const a of t){const t=e.attributes.get(a,s);if(t&&t.value&&t.value[1]&&Nt([o,t.value[1][1]])[0]===t.value[1][0])for(let e=0;e<n.length;++e){let t;const s=n[e];if(s){for(t=r;t>=0&&s.segments[t]===a.segments[t];--t);t<0&&(c.push(s),n[e]=null)}}}n=c}}else for(const a of e.paths.find(t,!1,!0))e.attributes.has(a,s)&&n.push(a);return n.sort((e,t)=>{for(let s=0;s<e.length;++s){const n=e.segments[s],a=t.segments[s];if(n!==a){const e=parseInt(n),t=parseInt(a);return e===+n&&t===+a?e-t:n<a?-1:1}}return 0}),n}function Lt(e,t,s,n,a=0){const r={};let i=s=s||0;n&&n.object&&(n.object>i&&(i=n.object),n.object<=n.value||(n.value=n.object));for(const o of e.paths.find(t,!0,!0,i?99:t.length)){const c=e.trackers.get(o);for(const e in c)r[e]|=c[e];const l=e.timestamps.get(o);if(void 0!==l)if(s>l||i>l&&o.length>t.length)e.timestamps.delete(o),e.attributes.delete(o),a|=1;else if(n&&o.length===t.length){const t=e.attributes.get(o);if(t){let s;for(const r in n)r in t&&n[r]>t[r][0]&&(a|=It[r],s||(s=Object.assign({},t),e.attributes.set(o,s)),delete s[r])}}}for(const t in r)r[t]&a&&e.changes.add(t)}function Pt(e,t){const s=typeof e;return null==e||"number"===s||"boolean"===s||"string"===s||"symbol"===s?e===t:JSON.stringify(e)===JSON.stringify(t)}function jt(e,t,s,n,a){t=e.paths.add(t);const r=e.timestamps.get(t);let i;t.wildcard?n=void 0:r&&(i=e.attributes.get(t));let o=0;if(n){n.value&&n.value[1]&&n.value[0]>=(n.object?n.object[0]:0)&&(n.object=[n.value[0],0]),n.object&&n.object[1]&&n.object[0]>=(n.value?n.value[0]:0)&&(n.value=[n.object[0],null]);const c=Object.assign({},i,n);if(i)for(const e in n)s=Math.max(s,n[e][0]),e in i?n[e][0]<=i[e][0]?c[e]=i[e]:Pt(n[e][1],i[e][1])||(o|=It[e]):o|=It[e];else o|=1;e.attributes.set(t,c),s<=r||(e.timestamps.set(t,s),t.length>1&&(a=jt(e,t.slice(0,t.length-1),s,{object:[s,1]},a)))}else if(!(s<=r))if(e.timestamps.set(t,s),i)e.attributes.delete(t),o|=1;else if(t.wildcard)for(const n of e.paths.find(t,!1,!0,t.length))s>e.timestamps.get(n)&&(a=a||[]).push([n,s]);if(o)if(1&o)(a=a||[]).push([t,s,null,o]);else if(o&It.object)(a=a||[]).push([t,0,{object:n.object[0]},o]);else for(const s of e.paths.find(t,!0,!1,t.length)){const t=e.trackers.get(s);for(const s in t)t[s]&o&&e.changes.add(s)}return a}function $t(e,t,s,n){t=e.paths.add(t);let a=1;if(n)for(const e of n)a|=It[e];let r=e.trackers.get(t);r||(r={},e.trackers.set(t,r)),r[s]|=a}const Mt=+L("EXT_TIMEOUT"),qt={},Ft=new Map;function Ut(e){const t=Ft.get(e[0]);t&&(Ft.delete(e[0]),t({fault:e[1],value:e[2]}))}function Gt(e){return new Promise(t=>{const s=e[0],n=u.randomBytes(8).toString("hex");if(Ft.set(n,t),!qt[s]){const e=p.spawn(T+"/bin/genieacs-ext",[s],{stdio:["inherit","inherit","inherit","ipc"]});qt[s]=e,e.on("error",a=>{qt[s]===e&&(Ft.delete(n)&&t({fault:{code:a.name,message:a.message},value:null}),Vt(qt[s]),delete qt[s])}),e.on("disconnect",()=>{qt[s]===e&&delete qt[s]}),e.on("message",Ut)}return setTimeout(()=>{Ft.delete(n)&&t({fault:{code:"timeout",message:"Extension timed out"},value:null})},Mt),!!qt[s].connected&&qt[s].send([n,e.slice(1)])})}function Vt(e){return new Promise(t=>{const s=Date.now()+5e3;e.kill();const n=setInterval(()=>{e.connected?Date.now()>s&&(e.kill("SIGKILL"),clearInterval(n),t()):(clearInterval(n),t())},100)})}async function Wt(){await Promise.all(Object.entries(qt).map(([e,t])=>(delete qt[e],Vt(t))))}function Bt(e,t){return(function(e){const t=u.createHash("md5").update(e).digest();return t.readUInt32LE(0)^t.readUInt32LE(4)^t.readUInt32LE(8)^t.readUInt32LE(12)}(e)>>>0)%t}function zt(e,t,s=0){return Math.trunc((e+s)/t)*t-s}function Jt(e){const t=e.trim().split(/\s+/);return 5===t.length&&t.unshift("*"),m.schedule(m.parse.cron(t.join(" "),!0))}function Ht(e,t,s=0){const n=[0,0],a=t.prev(1,new Date(e+s));a&&(n[0]=a.setMilliseconds(0)-s);const r=t.next(1,new Date(e+s+1e3));return r&&(n[1]=r.setMilliseconds(0)-s),n}const Kt=Symbol(),Xt=Symbol(),Zt=f.createContext();let Yt;const Qt=new WeakMap;function es(){return Yt.rng||(Yt.rng=S.default(Yt.sessionContext.deviceId)),Yt.rng()}es.seed=function(e){Yt.rng=S.default(e)};class ts{constructor(e,t,s,n){for(const a of t)Object.defineProperty(this,a,{get:function(){if(Yt.uncommitted&&ss(),Yt.revision!==n&&(n=Yt.revision,s=kt(Yt.sessionContext.deviceData,e,Yt.revision)),!s.length)return;const t=Yt.sessionContext.deviceData.attributes.get(s[0],Yt.revision)[a];return t?t[1]:void 0}});Object.defineProperty(this,"path",{get:function(){if(Yt.uncommitted&&ss(),Yt.revision!==n&&(n=Yt.revision,s=kt(Yt.sessionContext.deviceData,e,Yt.revision)),s.length)return s[0].toString()}}),Object.defineProperty(this,"size",{get:function(){if(Yt.uncommitted&&ss(),Yt.revision!==n&&(n=Yt.revision,s=kt(Yt.sessionContext.deviceData,e,Yt.revision)),s.length)return s.length}}),this[Symbol.iterator]=function*(){Yt.uncommitted&&ss(),Yt.revision!==n&&(n=Yt.revision,s=kt(Yt.sessionContext.deviceData,e,Yt.revision));for(const e of s)yield new ts(e,t,[e],Yt.revision)}}}function ss(){if(++Yt.revision,Yt.uncommitted=!1,Yt.revision===Yt.maxRevision+1){for(const e of Yt.declarations)e.defer=!1;throw Kt}if(Yt.revision>Yt.maxRevision+1)throw new Error("Declare function should not be called from within a try/catch block")}function ns(e){if(!e)return null;if(!e.name)return{code:"script",message:""+e};const t={code:"script."+e.name,message:e.message,detail:{name:e.name,message:e.message}};if(e.stack){t.detail.stack=e.stack;const s=t.detail.stack.match(/\s+at\s[^\s]+\s+at\s[^\s]+\s\(vm\.js.+\)/);s&&(t.detail.stack=t.detail.stack.slice(0,s.index))}return t}async function as(e,t,s,n,a,r=0){Yt={sessionContext:s,revision:n,maxRevision:a,uncommitted:!1,declarations:[],extensions:{},clear:[],rng:null,extCounter:r};for(const e of Object.keys(Zt))delete Zt[e];let i,o;Object.assign(Zt,t);try{i=e.runInContext(Zt,{displayErrors:!1}),o=0}catch(e){if(e===Kt)o=1;else{if(e!==Xt)return{fault:ns(e),clear:null,declare:null,done:!1,returnValue:null};o=2}}const c=Yt;let l;return await Promise.all(Object.entries(c.extensions).map(async([e,t])=>{l=await function(e,t,s){let n=Qt.get(e);n||(n=new Map,Qt.set(e,n));let a=n.get(t);return a||n.set(t,a=new Promise((a,r)=>{Gt(s).then(({fault:s,value:r})=>{n.delete(t),s||(e.extensionsCache[t]=r),a(s)}).catch(r)})),a}(c.sessionContext,e,t)||l})),l?{fault:l,clear:null,declare:null,done:!1,returnValue:null}:2===o?as(e,t,s,n,a,r-c.extCounter):{fault:null,clear:c.clear,declare:c.declarations,done:0===o,returnValue:i}}Object.defineProperty(Zt,"Date",{value:class{constructor(...e){return e.length?new Date(...e):new Date(Yt.sessionContext.timestamp)}static now(e,t){let s=Yt.sessionContext.timestamp;if("number"==typeof e){null==t&&(t=e);let n=0;t&&(n=Bt(Yt.sessionContext.deviceId,t)),s=zt(s,e,n)}else if("string"==typeof e){let n=0;t&&(n=Bt(Yt.sessionContext.deviceId,t));s=Ht(s,Jt(e),n)[0]}else if(e)throw new Error("Invalid Date.now() argument");return s}static parse(e){return Date.parse(e)}static UTC(...e){return Date.UTC(...e)}}}),Object.defineProperty(Zt,"declare",{value:function(e,t,s){Yt.uncommitted=!0,t||(t={}),s||(s={});const n=V.parse(e),a={path:n,pathGet:1,pathSet:null,attrGet:null,attrSet:null,defer:!0},r=new Set;for(const[e,t]of Object.entries(s))"path"===e?a.pathSet=t:(r.add(e),a.attrGet||(a.attrGet={}),a.attrSet||(a.attrSet={}),a.attrGet[e]=1,"value"!==e||Array.isArray(s.value)?a.attrSet[e]=s[e]:a.attrSet.value=[s.value]);for(const[e,s]of Object.entries(t))"path"===e?a.pathGet=s:(r.add(e),a.attrGet||(a.attrGet={}),a.attrGet[e]=s);return Yt.declarations.push(a),new ts(n,r)}}),Object.defineProperty(Zt,"clear",{value:function(e,t,s){Yt.uncommitted=!0,Yt.revision===Yt.maxRevision&&Yt.clear.push([V.parse(e),t,s])}}),Object.defineProperty(Zt,"commit",{value:ss}),Object.defineProperty(Zt,"ext",{value:function(...e){++Yt.extCounter;const t=e.map(String),s=`${Yt.revision}: ${JSON.stringify(t)}`;if(s in Yt.sessionContext.extensionsCache)return Yt.sessionContext.extensionsCache[s];throw Yt.extensions[s]=t,Xt}}),Object.defineProperty(Zt,"log",{value:function(e,t){if(Yt.revision===Yt.maxRevision&&Yt.extCounter>=0){const s=Object.assign({},t,{sessionContext:Yt.sessionContext,message:"Script: "+e});delete s.hostname,delete s.pid,delete s.name,delete s.version,delete s.deviceId,delete s.remoteAddress,We(s)}}}),Zt.random=es,f.runInContext("Math.random = random;",Zt),delete Zt.random;const rs=+L("MAX_CACHE_TTL");let is,os,cs=0;async function ls(){const e=""+L("MONGODB_CONNECTION_URL");is=n.MongoClient.connect(e,{useNewUrlParser:!0,useUnifiedTopology:!0});const t=(await is).db();os=t.collection("cache"),await os.createIndex({expire:1},{expireAfterSeconds:0});const s=Date.now(),a=await t.command({hostInfo:1});cs=a.system.currentTime.getTime()-s}async function us(){is&&await(await is).close()}async function fs(e){const t=new Date(Date.now()-cs);if(Array.isArray(e)){const s=await os.find({_id:{$in:e}}).toArray(),n={};e.forEach((e,t)=>{n[e]=t});const a=[];return s.forEach(e=>{e.expire>t&&(a[n[e._id]]=e.value)}),a}{const s=await os.findOne({_id:{$in:[e]}});return s&&s.expire>t?s.value:null}}async function ds(e,t,s=rs){const n=new Date(Date.now()-cs+1e3*s);await os.replaceOne({_id:e},{_id:e,value:t,expire:n},{upsert:!0})}const ps=Array.isArray,ms=new WeakMap,hs={};function gs(e,t){let s=!0;for(;s;){s=!1;for(let n=2;n<e.length;++n){const a=t(e[n-1],e[n],n-2);a!==hs&&(s=!0,(e=e.slice()).splice(n-1,2,a))}}return 2===e.length?e[1]:e}function ws(e,t="",s=""){const n={"-":"\\-","/":"\\/","\\":"\\/","^":"\\^",$:"\\$","*":"\\*","+":"\\+","?":"\\?",".":"\\.","(":"\\(",")":"\\)","|":"\\|","[":"\\[","]":"\\]","{":"\\{","}":"\\}","\\%":".*","\\_":"."};let a=function(e,t){const s=e.split("");for(let e=0;e<s.length;++e){const n=s[e];if(n===t)s[e]=s[e+1]||"",s[e+1]="";else if("_"===n)s[e]="\\_";else if("%"===n)for(s[e]="\\%";"%"===s[e+1];)s[++e]=""}return s.filter(e=>e)}(e,t);if(!a.length)return new RegExp("^$",s);a=a.map(e=>n[e]||e),a[0]=".*"===a[0]?"":"^"+a[0];const r=a.length-1;return a[r]=[".*",""].includes(a[r])?"":a[r]+"$",new RegExp(a.join(""),s)}function vs(e,t){return"boolean"==typeof e&&(e=+e),"boolean"==typeof t&&(t=+t),typeof e!=typeof t?"string"==typeof e?1:-1:e>t?1:e<t?-1:0}function bs(e){switch(typeof e){case"number":return e;case"boolean":return+e;case"string":return parseFloat(e)||0}}function ys(e){switch(typeof e){case"string":return e;case"number":return e.toString();case"boolean":return(+e).toString()}}function Ss(e){if(!Array.isArray(e))return e;if("CASE"===e[0]){for(let t=1;t<e.length;t+=2){if(Array.isArray(e[t]))return e;if(e[t])return e[t+1]}return null}if("FUNC"===e[0]){if("COALESCE"===e[1]){const t=[];for(let s=2;s<e.length;++s){const n=e[s];if(null!=n&&(t.push(n),!Array.isArray(n)))break}return t.length?1===t.length?t[0]:["FUNC","COALESCE",...t]:null}if("UPPER"===e[1]){if(null==e[2])return null;if(!ps(e[2]))return ys(e[2]).toUpperCase()}else if("LOWER"===e[1]){if(null==e[2])return null;if(!ps(e[2]))return ys(e[2]).toLowerCase()}}else if("PARAM"===e[0]){if(null==e[1])return null}else{if("AND"===e[0]){for(let t=1;t<e.length;++t)if(!Array.isArray(e[t])&&null!=e[t]&&!e[t])return!1;const t=[];for(let s=1;s<e.length;++s){const n=e[s];if(null==n)return null;Array.isArray(n)&&("AND"===n[0]?t.push(...n.slice(1)):t.push(n))}return!t.length||(1===t.length&&t.push(!0),["AND",...t])}if("OR"===e[0]){const t=[];for(let s=1;s<e.length;++s){const n=e[s];if(Array.isArray(n))"OR"===n[0]?t.push(...n.slice(1)):t.push(n);else if(n)return!0}return t.length?(1===t.length&&t.push(!1),["OR",...t]):!!e.some(e=>null==e)&&null}if("NOT"===e[0]){if(null==e[1])return null;if(!ps(e[1]))return!e[1];if("NOT"===e[1][0])return e[1][1]}else{if("IS NULL"===e[0])return ps(e[1])?e:null==e[1]||null;if("IS NOT NULL"===e[0])return ps(e[1])?e:null!=e[1]||null;if("LIKE"===e[0]){if(ps(e[1])||ps(e[2])||ps(e[3]))return e;if(null==e[1]||null==e[2]||e.length>=4&&null==e[3])return null;let t=ms.get(e);return t||(t=ws(e[2],e[3]),ms.set(e,t)),t.test(e[1])}if("NOT LIKE"===e[0]){if(ps(e[1])||ps(e[2])||ps(e[3]))return e;if(null==e[1]||null==e[2]||e.length>=4&&null==e[3])return null;let t=ms.get(e);return t||(t=ws(e[2],e[3]),ms.set(e,t)),!t.test(e[1])}if("="===e[0])return null==e[1]||null==e[2]?null:ps(e[1])||ps(e[2])?e:0===vs(e[1],e[2]);if("<>"===e[0])return null==e[1]||null==e[2]?null:ps(e[1])||ps(e[2])?e:0!==vs(e[1],e[2]);if(">"===e[0])return null==e[1]||null==e[2]?null:ps(e[1])||ps(e[2])?e:vs(e[1],e[2])>0;if(">="===e[0])return null==e[1]||null==e[2]?null:ps(e[1])||ps(e[2])?e:vs(e[1],e[2])>=0;if("<"===e[0])return null==e[1]||null==e[2]?null:ps(e[1])||ps(e[2])?e:vs(e[1],e[2])<0;if("<="===e[0])return null==e[1]||null==e[2]?null:ps(e[1])||ps(e[2])?e:vs(e[1],e[2])<=0;if("*"===e[0])return gs(e,(e,t)=>null==e||null==t?null:ps(e)||ps(t)?hs:bs(e)*bs(t));if("/"===e[0])return gs(e,(e,t,s)=>null==e||null==t?null:ps(e)||ps(t)?hs:0===s?bs(e)/bs(t):bs(e)*bs(t));if("+"===e[0])return gs(e,(e,t)=>null==e||null==t?null:ps(e)||ps(t)?hs:bs(e)+bs(t));if("-"===e[0])return gs(e,(e,t,s)=>null==e||null==t?null:ps(e)||ps(t)?hs:0===s?bs(e)-bs(t):bs(e)+bs(t));if("||"===e[0])return gs(e,(e,t)=>null==e||null==t?null:ps(e)||ps(t)?hs:ys(e)+ys(t))}}return e}function _s(e,t,s,n){return $(e,e=>{if(n&&(e=n(e)),!ps(e))return e;if("FUNC"===e[0]&&"NOW"===e[1]){if(s)return s}else if("PARAM"===e[0]){if(null==e[1])return null;if(t&&!ps(e[1])){let s;return s="function"==typeof t?t(e[1]):t[e[1]],null==s?null:("object"==typeof s&&(s=s.value?s.value[0]:null),s)}}return Ss(e)})}async function Ds(e,t,s,n){return async function e(t,s){if(!Array.isArray(t))return s(t);let n;for(let a=1;a<t.length;++a){const r=await e(t[a],s);r!==t[a]&&(n=n||t.slice(),n[a]=r)}return s(n||t)}(e,async e=>{if(n&&(e=await n(e)),!ps(e))return e;if("FUNC"===e[0]){if("NOW"===e[1]){if(s)return s}else if("UPPER"===e[1]){if(null==e[2])return null;if(!ps(e[2]))return(""+e[2]).toUpperCase()}else if("LOWER"===e[1]){if(null==e[2])return null;if(!ps(e[2]))return(""+e[2]).toLowerCase()}}else if("PARAM"===e[0]){if(null==e[1])return null;if(t&&!ps(e[1])){let s=t[e[1]];return null==s?null:("object"==typeof s&&(s=s.value?s.value[0]:null),s)}}return Ss(e)})}function Os(e){const t=new Set;return $(e,e=>(ps(e)&&"PARAM"===e[0]&&t.add(e[1]),e)),Array.from(t)}const Rs=Array.isArray;const xs=new Map;let As=null,Ts=1;async function Es(){const e=await async function(){return J.find().toArray()}();let t=await async function(){return H.find().toArray()}();t=t.map(e=>((e=function e(t,s="",n={}){for(const a of Object.keys(t)){const r=t[a];"object"!=typeof r||Array.isArray(r)?n[`${s}${a}`]=r:e(r,`${s}${a}.`,n)}return n}(e))._keys&&e._keys.length||(e._keys=Object.keys(e).filter(e=>!e.startsWith("_"))),e)),e.sort((e,t)=>e.weight===t.weight?e._id>t._id?1:e._id<t._id?-1:0:e.weight-t.weight);const s=[];for(const a of e){let e=null;if(a.schedule){const t=a.schedule.trim().split(/\s+/);e={md5:u.createHash("md5").update(a.schedule).digest("hex"),duration:null,schedule:null};try{e.duration=1e3*+t.shift(),e.schedule=Jt(t.join(" "))}catch(t){Ue({message:"Invalid preset schedule",preset:a._id,schedule:a.schedule}),e.schedule=!1}}const r=a.events||{};let i=!0;if(a.precondition){try{i=F(a.precondition)}catch(e){n=JSON.parse(a.precondition),i=!Object.keys(n).length||function e(t){const s=[];for(const[n,a]of Object.entries(t))if("$"===n[0])if("$and"===n){const t=["AND"];for(const s of Object.values(a))t.push(e(s));s.push(t)}else{if("$or"!==n)throw new Error(`Operator ${n} not supported`);{const t=["OR"];for(const s of Object.values(a))t.push(e(s));s.push(t)}}else if("_tags"===n)if("object"==typeof a){if(Rs(a))throw new Error("Invalid type");const e=[];for(const[t,s]of Object.entries(a))if("$ne"===t){if("string"!=typeof a.$ne)throw new Error("Only string values are allowed for _tags");e.push(["IS NULL",["PARAM","Tags."+s]])}else{if("$eq"!==t)throw new Error("Invalid tag query");if("string"!=typeof a.$eq)throw new Error("Only string values are allowed for _tags");e.push(["IS NOT NULL",["PARAM","Tags."+s]])}1===e.length?s.push(e[0]):e.length>1&&s.push(["AND",...e])}else s.push(["IS NOT NULL",["PARAM","Tags."+a]]);else if(n.startsWith("Tags.")){let e;if("boolean"==typeof a)e=a;else if(a.hasOwnProperty("$eq"))e=!!a.$eq;else if(a.hasOwnProperty("$ne"))e=!a.$ne;else{if(!a.hasOwnProperty("$exists"))throw new Error("Invalid tag query");e=!!a.$exists}s.push([e?"IS NOT NULL":"IS NULL",["PARAM",n]])}else if("object"==typeof a){if(Rs(a))throw new Error("Invalid type");const e=[];for(const[t,s]of Object.entries(a)){if("$eq"===t)e.push(["=",["PARAM",n],s]);else if("$ne"===t)e.push(["OR",["<>",["PARAM",n],s],["IS NULL",["PARAM",n]]]);else if("$lt"===t)e.push(["<",["PARAM",n],s]);else if("$lte"===t)e.push(["<=",["PARAM",n],s]);else if("$gt"===t)e.push([">",["PARAM",n],s]);else{if("$gte"!==t)throw new Error(`Operator ${t} not supported`);e.push([">=",["PARAM",n],s])}if(!["string","number","boolean"].includes(typeof s))throw new Error(`Invalid value for ${t} operator`)}if(1===e.length)s.push(e[0]);else if(e.length>1){const t=["AND"];s.push(t.concat(e))}}else s.push(["=",["PARAM",n],a]);return 1===s.length?s[0]:0===s.length||["AND",...s]}(n)}i=_s(i)}const o=a.provisions||[];for(const e of a.configurations)switch(e.type){case"age":o.push(["refresh",e.name,+e.age]);break;case"value":o.push(["value",e.name,e.value]);break;case"add_tag":o.push(["tag",e.tag,!0]);break;case"delete_tag":o.push(["tag",e.tag,!1]);break;case"provision":o.push([e.name].concat(e.args||[]));break;case"add_object":for(const s of t)if(s._id===e.object){const t=s._keys.map(e=>`${e}:${JSON.stringify(s[e])}`).join(","),n=`${e.name}.[${t}]`;o.push(["instances",n,1]);for(const e in s)e.startsWith("_")||-1!==s._keys.indexOf(e)||o.push(["value",`${n}.${e}`,s[e]])}break;case"delete_object":for(const s of t)if(s._id===e.object){const t=s._keys.map(e=>`${e}:${JSON.stringify(s[e])}`).join(","),n=`${e.name}.[${t}]`;o.push(["instances",n,0])}break;default:throw new Error("Unknown configuration type "+e.type)}s.push({name:a._id,channel:a.channel||"default",schedule:e,events:r,precondition:i,provisions:o})}var n;return s}async function Is(){const e=await async function(){return K.find().toArray()}(),t={};for(const s of e)t[s._id]={},t[s._id].md5=u.createHash("md5").update(s.script).digest("hex"),t[s._id].script=new f.Script(`"use strict";(function(){\n${s.script}\n})();`,{filename:s._id,lineOffset:-1,timeout:50});return t}async function Ns(){const e=await async function(){return X.find().toArray()}(),t={};for(const s of e)t[s._id]={},t[s._id].md5=u.createHash("md5").update(s.script).digest("hex"),t[s._id].script=new f.Script(`"use strict";(function(){\n${s.script}\n})();`,{filename:s._id,lineOffset:-1,timeout:50});return t}async function Cs(){const e=await async function(){return ee.find().toArray()}(),t={};for(const s of e)t[s.role]||(t[s.role]={}),t[s.role][s.access]||(t[s.role][s.access]={}),t[s.role][s.access][s.resource]={access:s.access,filter:F(s.filter||"true")},s.validate&&(t[s.role][s.access][s.resource].validate=F(s.validate));return t}async function ks(){const e=await Y.find().toArray(),t={};for(const s of e){const e=s.filename||s._id.toString();t[e]={},t[e].length=s.length,t[e].md5=s.md5,t[e].contentType=s.contentType}return t}async function Ls(){const e=await async function(){return te.find().toArray()}(),t={};for(const s of e)t[s._id]={password:s.password,salt:s.salt,roles:s.roles.split(",").map(e=>e.trim())};return t}async function Ps(){const e=await async function(){return(await se.find().toArray()).map(e=>({id:e._id,value:F(e.value)}))}();e.sort((e,t)=>e.id>t.id?1:e.id<t.id?-1:0);const t={filters:{},device:{},index:{},overview:{}},s={};for(const n of e){const e=_s(n.value);if(s[n.id]=e,n.id.startsWith("ui.")){const s=n.id.split(".");s.shift();let a=t;for(;s.length>1;){const e=s.shift();"object"!=typeof a[e]&&(a[e]={}),a=a[e]}a[s[0]]=e}}return[s,t]}async function js(){if(!Ts)return await new Promise(e=>setTimeout(e,20)),void await js();Ts=0;const e=Date.now(),t=await fs("presets_hash");if(As&&t===As)return void(Ts=e+(3e3-e%3e3));const s=await async function e(t,s){const n=Math.random().toString(36).slice(2),a=new Date(Date.now()-cs),r=new Date(Date.now()-cs+1e3*s);try{await os.updateOne({_id:t,expire:{$lte:a}},{$set:{value:n,expire:r}},{upsert:!0})}catch(n){if(n&&11e3===n.code)return await new Promise(e=>setTimeout(e,200)),e(t,s)}return async function(e){if(e){const s=new Date(Date.now()-cs+1e3*e);if(1!==(await os.updateOne({_id:t,value:n},{expire:s})).result.n)throw new Error("Lock expired")}else if(1!==(await os.deleteOne({_id:t,value:n})).result.n)throw new Error("Lock expired")}}("presets_hash_lock",3),n=await Promise.all([Es(),Is(),Ns(),ks(),Cs(),Ls(),Ps()]),a={presets:n[0],provisions:n[1],virtualParameters:n[2],files:n[3],permissions:n[4],users:n[5],config:n[6][0],ui:n[6][1]};if(As){const e=As,t=xs.get(e);setTimeout(()=>{xs.get(e)===t&&xs.delete(e)},6e4).unref()}As=function(e){const t=u.createHash("md5");for(const s of e.presets)t.update(JSON.stringify(s.name)),t.update(JSON.stringify(s.channel)),t.update(JSON.stringify(s.schedule)),t.update(JSON.stringify(s.events)),t.update(JSON.stringify(s.precondition)),t.update(JSON.stringify(s.provisions));let s;s=Object.keys(e.provisions).sort(),t.update(JSON.stringify(s));for(const n of s)t.update(e.provisions[n].md5);s=Object.keys(e.virtualParameters).sort(),t.update(JSON.stringify(s));for(const n of s)t.update(e.virtualParameters[n].md5);s=Object.keys(e.config).sort(),t.update(JSON.stringify(s));for(const n of s)t.update(JSON.stringify(e.config[n]));s=Object.keys(e.files).sort(),t.update(JSON.stringify(s));for(const n of s)t.update(JSON.stringify(e.files[n]));s=Object.keys(e.users).sort(),t.update(JSON.stringify(s));for(const n of s)t.update(JSON.stringify(e.users[n]));const n=Object.keys(e.permissions).sort();t.update(JSON.stringify(n));for(const a of n){const n=Object.keys(e.permissions[a]).sort();t.update(JSON.stringify(n));for(const r of n){s=Object.keys(e.permissions[a][r]).sort(),t.update(JSON.stringify(s));for(const n of s)t.update(JSON.stringify(e.permissions[a][r][n]))}}return t.digest("hex")}(a),xs.set(As,a),await ds("presets_hash",As,300),await s(0),Ts=e+(3e3-e%3e3)}async function $s(){return Date.now()>Ts&&await js(),As}function Ms(e){const t=xs.get(e);if(!t)throw new Error("Cache snapshot does not exist");return t.virtualParameters}function qs(e,t,s,n,a){const r=xs.get(e);if(!r)throw new Error("Cache snapshot does not exist");const i={"cwmp.downloadTimeout":"DOWNLOAD_TIMEOUT","cwmp.debug":"DEBUG","cwmp.retryDelay":"RETRY_DELAY","cwmp.sessionTimeout":"SESSION_TIMEOUT","cwmp.connectionRequestTimeout":"CONNECTION_REQUEST_TIMEOUT","cwmp.gpnNextLevel":"GPN_NEXT_LEVEL","cwmp.gpvBatchSize":"GPV_BATCH_SIZE","cwmp.cookiesPath":"COOKIES_PATH","cwmp.datetimeMilliseconds":"DATETIME_MILLISECONDS","cwmp.booleanLiteral":"BOOLEAN_LITERAL","cwmp.connectionRequestAllowBasicAuth":"CONNECTION_REQUEST_ALLOW_BASIC_AUTH","cwmp.maxCommitIterations":"MAX_COMMIT_ITERATIONS","cwmp.deviceOnlineThreshold":"DEVICE_ONLINE_THRESHOLD","cwmp.udpConnectionRequestPort":"UDP_CONNECTION_REQUEST_PORT"};if(!(t in r.config)){if(t in i){let e;return s&&s.id?e=s.id:a&&(e=a(["PARAM","DeviceID.ID"]),Array.isArray(e)&&(e=null)),L(i[t],e)}return null}const o=_s(r.config[t],s,n,a);return Array.isArray(o)?null:o}const Fs=+L("MAX_DEPTH");const Us=Object.freeze({__proto__:null,refresh:function(e,t,s){if((2!==t.length||"string"!=typeof t[1])&&(3!==t.length||"string"!=typeof t[1]||"number"!=typeof t[2])&&(t.length<4||"string"!=typeof t[1]||"number"!=typeof t[2]||"boolean"!=typeof t[3]))throw new Error("Invalid arguments");const n=1e3*(t[2]||1),a=Bt(e.deviceId,n),r=zt(e.timestamp,n,a);let i,o;if(null==t[3])o=!0,i={object:1,writable:1,value:r};else{i={},o=!!t[3];for(const e of t.slice(4))i[e]=r}let c=V.parse(t[1]),l=c.length;if(o){const e=c.segments.slice();l=e.length,e.length=Fs,e.fill("*",l),c=V.parse(e.join("."))}for(let e=l;e<=c.length;++e)s.push({path:c.slice(0,e),pathGet:r,pathSet:null,attrGet:i,attrSet:null,defer:!0});return!0},value:function(e,t,s){if(t.length<3||t.length>4||"string"!=typeof t[1])throw new Error("Invalid arguments");let n,a;return 3===t.length?(n="value",a=t[2]):(n=t[2]||"",a=t[3]),"accessList"===n?a=(a||"").split(",").map(e=>e.trim()).filter(e=>!!e):"value"===n&&(a=[a]),s.push({path:V.parse(t[1]),pathGet:1,pathSet:null,attrGet:{[n]:1},attrSet:{[n]:a},defer:!0}),!0},tag:function(e,t,s){if(3!==t.length||"string"!=typeof t[1]||"boolean"!=typeof t[2])throw new Error("Invalid arguments");return s.push({path:V.parse("Tags."+t[1]),pathGet:1,pathSet:null,attrGet:{value:1},attrSet:{value:[t[2]]},defer:!0}),!0},reboot:function(e,t,s){if(1!==t.length)throw new Error("Invalid arguments");return s.push({path:V.parse("Reboot"),pathGet:1,pathSet:null,attrGet:{value:1},attrSet:{value:[e.timestamp]},defer:!0}),!0},reset:function(e,t,s){if(1!==t.length)throw new Error("Invalid arguments");return s.push({path:V.parse("FactoryReset"),pathGet:1,pathSet:null,attrGet:{value:1},attrSet:{value:[e.timestamp]},defer:!0}),!0},download:function(e,t,s){if(!(3===t.length&&"string"==typeof t[1]&&"string"==typeof t[2]||4===t.length&&"string"==typeof t[1]&&"string"==typeof t[2]&&"string"==typeof t[3]))throw new Error("Invalid arguments");const n=["FileType:"+JSON.stringify(t[1]||""),"FileName:"+JSON.stringify(t[2]||""),"TargetFileName:"+JSON.stringify(t[3]||"")].join(",");return s.push({path:V.parse(`Downloads.[${n}]`),pathGet:1,pathSet:1,attrGet:null,attrSet:null,defer:!0}),s.push({path:V.parse(`Downloads.[${n}].Download`),pathGet:1,pathSet:null,attrGet:{value:1},attrSet:{value:[e.timestamp]},defer:!0}),!0},instances:function(e,t,s,n,a){if(3!==t.length||"string"!=typeof t[1])throw new Error("Invalid arguments");let r=Number(t[2]);if(Number.isNaN(r))throw new Error("Invalid arguments");const i=V.parse(t[1]);if("+"===t[2][0]||"-"===t[2][0]){if(s.push({path:i,pathGet:1,pathSet:null,attrGet:null,attrSet:null,defer:!0}),a===n)return!1;const t=kt(e.deviceData,i,n+1);r=Math.max(0,t.length+r)}return s.push({path:i,pathGet:1,pathSet:r,attrGet:null,attrSet:null,defer:!0}),!0}});class Gs{constructor(){this.lengthIndex=[],this.fragmentIndex=[],this.stringIndex=new Map}get depth(){return this.lengthIndex.length}add(e){if(e.alias)throw new Error("PathSet does not support aliased paths");const t=this.get(e);if(t)return t;for(this.stringIndex.set(e.toString(),e);this.lengthIndex.length<=e.length;)this.lengthIndex.push(new Set),this.lengthIndex.length>1&&this.fragmentIndex.push(new Map);this.lengthIndex[e.length].add(e);for(let t=0;t<e.length;++t){const s=e.segments[t],n=this.fragmentIndex[t];let a=n.get(s);a||(a=new Set,n.set(s,a)),a.add(e)}return e}get(e){return this.stringIndex.get(e.toString())||null}find(e,t=!1,s=!1,n=e.length){if(e.alias)throw new Error("PathSet does not support aliased paths");const a=e.length;if(!(t||n!==a||s&&e.wildcard)){const t=this.get(e);return t?[t]:[]}const r=this.lengthIndex.slice(a,n+1);if(!r.length)return[];let i;for(let n=a-1;n>=0;--n){let a;const r=this.fragmentIndex[n];if(e.wildcard>>n&1){if(s)continue}else t&&(a=r.get("*"));const o=e.segments[n],c=r.get(o);if(c)i=a?i?i.filter(e=>c.has(e)||a.has(e)):[...c,...a]:i?i.filter(e=>c.has(e)):[...c];else{if(!a)return[];i=i?i.filter(e=>a.has(e)):[...a]}if(!i.length)return i}return i=i?i.filter(e=>r.some(t=>t.has(e))):[].concat(...r.map(e=>[...e])),i}}const Vs=Symbol();class Ws{constructor(){this._sizeDiff=[0],this._revision=0,this.map=new Map,this.dirty=0}get size(){return this.map.size+this._sizeDiff[this.revision]}get revision(){return this._revision}set revision(e){for(let t=this._sizeDiff.length;t<=e;++t)this._sizeDiff[t]=this._sizeDiff[t-1];this._revision=e}get(e,t=this._revision){const s=this.map.get(e);if(!s)return;const n=s[Math.min(s.length-1,t)];return n!==Vs?n:void 0}has(e,t=this._revision){const s=this.map.get(e);if(!s)return!1;return s[Math.min(s.length-1,t)]!==Vs}set(e,t,s=this._revision){let n=this.map.get(e);if(!n){this.dirty|=1<<s;for(let e=0;e<s;++e)this._sizeDiff[e]-=1;n=[];for(let e=0;e<s;++e)n[e]=Vs;return n[s]=t,this.map.set(e,n),this}if(s<n.length-1)return null;const a=n[n.length-1];this.dirty|=1<<s,a===Vs&&++this._sizeDiff[s];for(let e=n.length;e<s;++e)n[e]=a;return n[s]=t,this}delete(e,t=this._revision){const s=this.map.get(e);if(!s)return!1;if(t<s.length-1)return null;const n=s[s.length-1];if(n===Vs)return!1;this.dirty|=1<<t,--this._sizeDiff[t];for(let e=s.length;e<t;++e)s[e]=n;return s[t]=Vs,!0}getRevisions(e){const t=this.map.get(e);if(!t)return null;const s={};let n=Vs;for(const[e,a]of t.entries())a!==n&&(a===Vs?s.delete|=1<<e:s[e]=a,n=a);return s}setRevisions(e,t){const s=t.delete||0,n=Object.keys(t).reduce((e,t)=>"delete"===t?e:e|1<<+t,s),a=[];let r=Vs;for(let e=0;n>>e;++e){let n=r;s&1<<e?n=Vs:e in t&&(n=t[e]),n!==r&&(this.dirty|=1<<e),a[e]=n,r=n}this.map.set(e,a)}getDiff(e){const t=this.map.get(e);if(!t)return[undefined,undefined];let s=t[0];s===Vs&&(s=undefined);let n=t[t.length-1];return n===Vs&&(n=undefined),[s,n]}*diff(){for(const[e,t]of this.map){let s=t[0],n=t[t.length-1];s===Vs&&n===Vs||(s===Vs&&(s=undefined),n===Vs&&(n=undefined),yield[e,s,n])}}collapse(e){if(this._sizeDiff.length<=e)return;this._sizeDiff[e]=this._sizeDiff[this._sizeDiff.length-1],this._sizeDiff.splice(e+1,this._sizeDiff.length);const t=this.dirty>>e;this.dirty=this.dirty^t<<e,this.dirty|=+!!t<<e;for(const[t,s]of this.map){const n=s.length-1;if(n<=e)continue;const a=s[n];s.splice(e,n-e),a!==Vs||s.some(e=>e!==Vs)||this.map.delete(t)}}}class Bs{constructor(){this.set=new Set}add(e){this.set.add(e)}delete(e){this.set.delete(e)}superset(e){const t=[];for(const s of this.set){let n=!0;for(const t in e)if(s[t]!==e[t]){n=!1;break}n&&t.push(s)}return t.sort((e,t)=>{const s=Object.keys(e),n=Object.keys(t);if(s.length!==n.length)return n.length-s.length;s.sort(),n.sort();for(let a=0;a<s.length;++a){if(s[a]>n[a])return 1;if(s[a]<n[a])return-1;if(e[s[a]]>t[n[a]])return 1;if(e[s[a]]<t[n[a]])return-1}return 0}),t}subset(e){const t=[];for(const s of this.set){let n=!0;for(const t in s)if(s[t]!==e[t]){n=!1;break}n&&t.push(s)}return t.sort((e,t)=>{const s=Object.keys(e),n=Object.keys(t);if(s.length!==n.length)return s.length-n.length;s.sort(),n.sort();for(let a=0;a<s.length;++a){if(s[a]>n[a])return 1;if(s[a]<n[a])return-1;if(e[s[a]]>t[n[a]])return 1;if(e[s[a]]<t[n[a]])return-1}return 0}),t}[Symbol.iterator](){return this.set.values()}forEach(e){this.set.forEach(e)}values(){return this.set.values()}clear(){this.set.clear()}get size(){return this.set.size}}const zs=new Set(["xsd:int","xsd:unsignedInt","xsd:boolean","xsd:string","xsd:dateTime","xsd:base64","xsd:hexBinary"]);function Js(){return{paths:new Gs,timestamps:new Ws,attributes:new Ws,trackers:new Map,changes:new Set}}function Hs(e){return e.timestamp.toString(16)+("0"+e.cycle.toString(16)).slice(-2)+("0"+e.rpcCount.toString(16)).slice(-2)}function Ks(e,t){if(!Array.isArray(t))return t;if("PARAM"===t[0]&&"string"==typeof t[1]){let s=t[1];if("id"===s)s="DeviceID.ID";else if("serialNumber"===s)s="DeviceID.SerialNumber";else if("productClass"===s)s="DeviceID.ProductClass";else if("oui"===s)s="DeviceID.OUI";else if("remoteAddress"===s)return De(e.httpRequest).remoteAddress;const n=e.deviceData,a=n.paths.get(V.parse(s));if(a){const e=n.attributes.get(a,1);if(e&&e.value&&e.value[1])return e.value[1][0]}}else if("FUNC"===t[0]&&"REMOTE_ADDRESS"===t[1])return De(e.httpRequest).remoteAddress;return t}function Xs(e,t){const s=e.timestamp+e.iteration+1;let n;n=e.deviceData.paths.add(V.parse(`Downloads.${t}.LastDownload`));const a=e.deviceData.attributes.get(n);n=e.deviceData.paths.add(V.parse(`Downloads.${t}.Download`));const r=jt(e.deviceData,n,s,{value:[s,[a&&a.value[1]?a.value[1][0]:0,"xsd:dateTime"]]});if(r)for(const t of r)Lt(e.deviceData,t[0],t[1],t[2],t[3])}function Zs(e,t,s){const n=2*+qs(e.cacheSnapshot,"cwmp.maxCommitIterations",{},e.timestamp,t=>Ks(e,t));delete e.syncState,delete e.rpcRequest,e.declarations=[],e.provisionsRet=[],e.revisions[e.revisions.length-1]>0&&(e.deviceData.timestamps.collapse(1),e.deviceData.attributes.collapse(1),e.revisions=[0],e.extensionsCache={}),e.iteration!==e.cycle*n&&(e.cycle+=1,e.rpcCount=0,e.iteration=e.cycle*n),e.channels[t]|=0;for(const n of s){const s=[t],a=JSON.stringify(n);for(const[t,n]of e.provisions.entries())if(JSON.stringify(n)===a){e.provisions.splice(t,1);for(const n of Object.keys(e.channels)){e.channels[n]&1<<t&&s.push(n);const a=e.channels[n]>>t+1;e.channels[n]&=(1<<t)-1,e.channels[n]|=a<<t}}for(const t of s)e.channels[t]|=1<<e.provisions.length;e.provisions.push(n)}}function Ys(e){const t=2*+qs(e.cacheSnapshot,"cwmp.maxCommitIterations",{},e.timestamp,t=>Ks(e,t));e.revisions[e.revisions.length-1]>0&&(e.deviceData.timestamps.collapse(1),e.deviceData.attributes.collapse(1)),e.iteration!==e.cycle*t&&(e.cycle+=1,e.rpcCount=0,e.iteration=e.cycle*t),delete e.syncState,delete e.rpcRequest,e.provisions=[],e.virtualParameters=[],e.channels={},e.declarations=[],e.provisionsRet=[],e.revisions=[0],e.extensionsCache={}}async function Qs(e,t,s,n){const a=function(e){const t=xs.get(e);if(!t)throw new Error("Cache snapshot does not exist");return t.provisions}(e.cacheSnapshot),r=await Promise.all(t.map(async t=>{if(!a[t[0]]){if(Us[t[0]]){const a=[];let r=!0,i=null;try{r=Us[t[0]](e,t,a,s,n)}catch(e){i={code:"script."+e.name,message:e.message,detail:{name:e.name,message:e.message,stack:`${e.name}: ${e.message}\n    at ${t[0]}`}}}return{fault:i,clear:null,declare:a,done:r,returnValue:null}}return null}return as(a[t[0]].script,{args:t.slice(1)},e,s,n)}));let i,o=!0,c=[],l=[];for(const e of r)e&&(o=o&&e.done,e.declare&&(c=c.concat(e.declare)),e.clear&&(l=l.concat(e.clear)),i=e.fault||i);if(o)for(const e of c)e.defer=!1;return{fault:i,clear:l,declare:c,done:o,returnValue:null}}async function en(e,t,s,n){const a=Ms(e.cacheSnapshot),r=await Promise.all(t.map(async t=>{const r={args:t.slice(1)},i=await as(a[t[0]].script,r,e,s,n);if(i.done&&!i.fault){if(!i.returnValue)return i.fault={code:"script",message:"Invalid virtual parameter return value"},i;const e={};if(null!=i.returnValue.writable)e.writable=!!i.returnValue.writable;else if(null!=t[1].writable||null!=t[2].writable)return i.fault={code:"script",message:`Virtual parameter '${t[0]}' must provide 'writable' attribute`},i;if(null!=i.returnValue.value){let t,s;if(Array.isArray(i.returnValue.value)?[t,s]=i.returnValue.value:t=i.returnValue.value,s||(s="number"==typeof t?"xsd:int":"boolean"==typeof t?"xsd:boolean":t instanceof Date?"xsd:datetime":"xsd:string"),null==t||!zs.has(s))return i.fault={code:"script",message:"Invalid virtual parameter value attribute"},i;e.value=Nt([t,s])}else if(null!=t[1].value||null!=t[2].value)return i.fault={code:"script",message:`Virtual parameter '${t[0]}' must provide 'value' attribute`},i;i.returnValue=e}return i}));let i=!0;const o=[];let c,l=[],u=[];for(const e of r)e?(i=i&&e.done,e.declare&&(l=l.concat(e.declare)),e.clear&&(u=u.concat(e.clear)),o.push(e.returnValue),c=e.fault||c):o.push(null);if(i)for(const e of l)e.defer=!1;return{fault:c,clear:u,declare:l,done:i,returnValue:i?o:null}}function tn(e,t){e.syncState||(e.syncState={refreshAttributes:{exist:new Set,object:new Set,writable:new Set,value:new Set,notification:new Set,accessList:new Set},spv:new Map,spa:new Map,gpn:new Set,gpnPatterns:new Map,tags:new Map,virtualParameterDeclarations:[],instancesToDelete:new Map,instancesToCreate:new Map,downloadsToDelete:new Set,downloadsToCreate:new Bs,downloadsValues:new Map,downloadsDownload:new Map,reboot:0,factoryReset:0});const s=new Map,n=new Map,a=new Map,r=Ms(e.cacheSnapshot);function i(e,t){let s=n.get(e);if(s){s=Object.assign({},s);for(const[e,n]of Object.entries(t))s[e]=Math.max(n,s[e]||0);n.set(e,s)}else n.set(e,t)}function o(e,t,s){let n=a.get(e);n?(n=Object.assign({},n,t),a.set(e,n)):s||a.set(e,t)}for(const n of t){let t,a=n.path;if(a.length){if((1&(a.alias|a.wildcard)||"VirtualParameters"===a.segments[0])&&(e.deviceData.paths.add(V.parse("VirtualParameters")),2&(a.alias|a.wildcard))){e.deviceData.paths.add(V.parse("VirtualParameters.*"));for(const t of Object.keys(r))e.deviceData.paths.add(V.parse("VirtualParameters."+t))}if((1&(a.alias|a.wildcard)||"Reboot"===a.segments[0])&&e.deviceData.paths.add(V.parse("Reboot")),(1&(a.alias|a.wildcard)||"FactoryReset"===a.segments[0])&&e.deviceData.paths.add(V.parse("FactoryReset")),a.alias){const r=Ct(a,n.pathGet||1);for(const t of r){const n=e.deviceData.paths.add(t.path);let a;s.set(n,Math.max(t.pathGet||1,s.get(n)||0)),t.attrGet&&(a=Object.keys(t.attrGet),i(n,t.attrGet)),$t(e.deviceData,n,"prerequisite",a)}t=kt(e.deviceData,a);for(const e of t)s.set(e,Math.max(n.pathGet||1,s.get(e)||0)),n.attrGet&&i(e,n.attrGet)}else a=e.deviceData.paths.add(a),s.set(a,Math.max(n.pathGet||1,s.get(a)||0)),n.attrGet&&i(a,n.attrGet),$t(e.deviceData,a,"prerequisite");if(n.attrSet)if(a.alias|a.wildcard){t||(t=kt(e.deviceData,a));for(const e of t)o(e,n.attrSet,n.defer)}else o(a,n.attrSet,n.defer);if(null!=n.pathSet){let s,r;Array.isArray(n.pathSet)?(s=n.pathSet[0],r=n.pathSet[1]):s=r=n.pathSet;let i,o=a.slice(0,-1);if(Array.isArray(a.segments[a.length-1])){i={};for(const[e,t]of a.segments[a.length-1])i[e.toString()]=t}else"*"===a.segments[a.length-1]&&(i={});if(0==((a.wildcard|a.alias)&(1<<a.length-1)-1))o=e.deviceData.paths.add(o),t||(t=kt(e.deviceData,a)),an(e,o,t,i,s,r,n.defer);else{const t=kt(e.deviceData,o);for(const o of t)an(e,o,kt(e.deviceData,o.concat(a.slice(-1))),i,s,r,n.defer)}}}}return function(e,t,s,n){const a=e.deviceData,r=e.syncState,i=e.deviceData.paths.add(V.parse("")),o=a.paths.find(i,!1,!0,99);o.sort((e,t)=>e.wildcard===t.wildcard?e.length-t.length:e.wildcard-t.wildcard);const c=[];function l(e,i,o,u){const f=u[0],d=new Map;let p,m,h,g=0,w=0;0===f.wildcard&&(h=a.attributes.get(f));for(const e of u)if(e.length>f.length){const t=e.segments[f.length];let s=d.get(t);if(!s){if(e.length>f.length+1){s=[e.slice(0,f.length+1)]}else s=[];d.set(t,s)}s.push(e)}else if(w=Math.max(w,a.timestamps.get(e)||0),g=Math.max(g,t.get(e)||0),0===f.wildcard){const t=s.get(e);if(t)if(p){p=Object.assign({},p);for(const[e,s]of Object.entries(t))p[e]=Math.max(s,p[e]||0)}else p=t;m=n.get(e)||m}switch(h?(e=f,null!=(i=h.object?h.object[1]:null)&&0===i&&(o=Math.max(o,h.object[0]))):o=Math.max(o,w),"*"!==f.segments[0]?f.segments[0]:e.segments[0]){case"Reboot":1===f.length&&m&&m.value&&(r.reboot=+new Date(m.value[0]));break;case"FactoryReset":1===f.length&&m&&m.value&&(r.factoryReset=+new Date(m.value[0]));break;case"Tags":2===f.length&&0===f.wildcard&&m&&m.value&&r.tags.set(f,Nt([m.value[0],"xsd:boolean"])[0]);break;case"Events":case"DeviceID":break;case"Downloads":3===f.length&&0===f.wildcard&&m&&m.value&&("Download"===f.segments[2]?r.downloadsDownload.set(f,m.value[0]):r.downloadsValues.set(f,m.value[0]));break;case"VirtualParameters":if(f.length<=2){let e;if(g<=w||(e=[f]),0===f.wildcard){if(p)for(const[t,s]of Object.entries(p))h&&h[t]&&s<=h[t][0]||(e||(e=[f]),e[1]||(e[1]={}),e[1][t]=s);m&&(e||(e=[f]),e[2]=m)}e&&c.push(e)}break;default:if(g>w&&g>o)if(f===e)r.refreshAttributes.exist.add(e);else if(i)if(r.gpn.add(e),o>0){const t=1<<e.length;r.gpnPatterns.set(e,t|r.gpnPatterns.get(e))}else{const t=(1<<f.length)-1^(1<<e.length)-1;r.gpnPatterns.set(f,t|r.gpnPatterns.get(f))}else if(r.refreshAttributes.object.add(e),null==i){const t=(1<<r.gpnPatterns.size)-1^(1<<e.length)-1;r.gpnPatterns.set(f,t|r.gpnPatterns.get(f))}if(h){if(p)for(const[e,t]of Object.entries(p))h[e]&&t<=h[e][0]||("value"===e?h.object&&null!=h.object[1]?0===h.object[1]&&r.refreshAttributes.value.add(f):r.refreshAttributes.object.add(f):r.refreshAttributes[e].add(f));if(m){if(null!=m.value&&r.spv.set(f,m.value),null!=m.notification){const e=r.spa.get(f);e?e.notification=m.notification:r.spa.set(f,{notification:m.notification,accessList:null})}if(null!=m.accessList){const e=r.spa.get(f);e?e.accessList=m.accessList:r.spa.set(f,{notification:null,accessList:m.accessList})}}}}for(let[t,s]of d)if(((f.wildcard^s[0].wildcard)&(1<<f.length)-1)>>e.length==0){if("*"!==t){const e=d.get("*");e&&(s=s.concat(e))}l(e,i,o,s)}}(t.size||s.size||n.size)&&l(i,1,0,o);return c}(e,s,n,a)}async function sn(e,t){if(null!=e.rpcRequest)return{fault:null,rpcId:Hs(e),rpc:e.rpcRequest};if(!(e.virtualParameters.length||e.declarations.length||t&&t.length||e.provisions.length))return{fault:null,rpcId:null,rpc:null};if(e.declarations.length<=e.virtualParameters.length){const s=e.declarations.length,n=(e.revisions[s]||0)+1;let a,r;e.deviceData.timestamps.revision=n,e.deviceData.attributes.revision=n,0===s?(a=Qs,r=e.provisions):(a=en,r=e.virtualParameters[s-1]);const{fault:i,clear:o,declare:c,done:l,returnValue:u}=await a(e,r,e.revisions[s-1]||0,e.revisions[s]);if(i)return i.timestamp=e.timestamp,{fault:i,rpcId:null,rpc:null};for(const t of o)if(t[1]>e.timestamp&&(t[1]=e.timestamp),t[2])for(const[s,n]of Object.entries(t[2]))n>e.timestamp&&(t[2][s]=e.timestamp);e.declarations.push(c),e.provisionsRet[s]=s?u:l;for(const t of c)if(t.pathGet>e.timestamp&&(t.pathGet=e.timestamp),t.attrGet)for(const[s,n]of Object.entries(t.attrGet))n>e.timestamp&&(t.attrGet[s]=e.timestamp);if(o)for(const t of o)Lt(e.deviceData,t[0],t[1],t[2],t[3]);return sn(e,t)}if(t&&t.length)return delete e.syncState,e.declarations[0]||(e.declarations[0]=[]),e.declarations[0]=e.declarations[0].concat(t),sn(e,null);if(e.rpcCount>=255)return{fault:{code:"too_many_rpcs",message:"Too many RPC requests",timestamp:e.timestamp},rpcId:null,rpc:null};if(e.revisions.length>=8)return{fault:{code:"deeply_nested_vparams",message:"Virtual parameters are referencing other virtual parameters in a deeply nested manner",timestamp:e.timestamp},rpcId:null,rpc:null};if(e.cycle>=255)return{fault:{code:"too_many_cycles",message:"Too many provision cycles",timestamp:e.timestamp},rpcId:null,rpc:null};const s=2*+qs(e.cacheSnapshot,"cwmp.maxCommitIterations",{},e.timestamp,t=>Ks(e,t));if(e.iteration>=s*(e.cycle+1))return{fault:{code:"too_many_commits",message:"Too many commit iterations",timestamp:e.timestamp},rpcId:null,rpc:null};if(!(e.syncState&&e.syncState.virtualParameterDeclarations&&e.syncState.virtualParameterDeclarations.length>=e.declarations.length)){const t=e.syncState&&e.syncState.virtualParameterDeclarations?e.syncState.virtualParameterDeclarations.length:0;t===e.declarations.length-1&&(e.iteration+=2);let s=tn(e,e.declarations[t]);const n=e.timestamp+e.iteration;let a;const r=Ms(e.cacheSnapshot);if(s=s.filter(t=>{if(Object.keys(r).length){if(1===t[0].length)return e.deviceData.attributes.has(t[0])||(a=jt(e.deviceData,t[0],n,{object:[n,1],writable:[n,0]},a)),!1;if(2===t[0].length){if("*"===t[0].segments[1]){for(const t of Object.keys(r))a=jt(e.deviceData,V.parse("VirtualParameters."+t),n,{object:[n,0]},a);return a=jt(e.deviceData,t[0],n,null,a),!1}if(r[t[0].segments[1]])return e.deviceData.attributes.has(t[0])||(a=jt(e.deviceData,t[0],n,{object:[n,0]},a)),!0}}for(const s of e.deviceData.paths.find(t[0],!1,!0))if(e.deviceData.attributes.has(s)){a||(a=[]),a.push([t[0],n]);break}return!1}),a)for(const t of a)Lt(e.deviceData,t[0],t[1],t[2],t[3]);return e.syncState.virtualParameterDeclarations[t]=s,sn(e,null)}if(!e.syncState)return{fault:null,rpcId:null,rpc:null};const n=e.declarations.length-1;let a=function(e,t){let s;if(t)for(const n of t)if(n[1]){const t={},a={},r={},i=e.deviceData.attributes.get(n[0])||{};for(const[e,t]of Object.entries(n[1]))"value"!==e&&"writable"!==e||(!i[e]||t>i[e][0])&&(r[e]=t);for(const[e,s]of Object.entries(i))t[e]=s[0],a[e]=s[1];Object.keys(r).length&&(s||(s=[]),s.push([n[0].segments[1],r,{},t,a]))}return s}(e,e.syncState.virtualParameterDeclarations[n]);if(!a&&(e.rpcRequest=function(e){const t=e.syncState;if(!t)return null;for(const s of t.refreshAttributes.exist){let n=!1;for(const a of e.deviceData.paths.find(s,!1,!0,99))if(t.refreshAttributes.value.has(a)||t.refreshAttributes.object.has(a)||t.refreshAttributes.writable.has(a)||t.refreshAttributes.notification.has(a)||t.refreshAttributes.accessList.has(a)||t.gpn.has(a)){n=!0;break}if(!n){const n=e.deviceData.paths.add(s.slice(0,-1));t.gpn.add(n);const a=1<<n.length;t.gpnPatterns.set(n,a|t.gpnPatterns.get(n))}}t.refreshAttributes.exist.clear();for(const s of t.refreshAttributes.object){let n=!1;for(const a of e.deviceData.paths.find(s,!1,!0,99))if(t.refreshAttributes.value.has(a)||a.length>s.length&&(t.refreshAttributes.object.has(a)||t.refreshAttributes.writable.has(a)||t.refreshAttributes.notification.has(a)||t.refreshAttributes.accessList.has(a))){n=!0;break}if(!n){const n=e.deviceData.paths.add(s.slice(0,-1));t.gpn.add(n);const a=1<<n.length;t.gpnPatterns.set(n,a|t.gpnPatterns.get(n))}}t.refreshAttributes.object.clear();for(const s of t.refreshAttributes.writable){const n=e.deviceData.paths.add(s.slice(0,-1));t.gpn.add(n);const a=1<<n.length;t.gpnPatterns.set(n,a|t.gpnPatterns.get(n))}if(t.refreshAttributes.writable.clear(),t.gpn.size){const s=qs(e.cacheSnapshot,"cwmp.gpnNextLevel",{},e.timestamp,t=>Ks(e,t)),n=Array.from(t.gpn.keys()).sort((e,t)=>t.length-e.length);let a=n.pop();for(;a&&a.length&&!e.deviceData.attributes.has(a);)t.gpn.delete(a),a=n.pop();if(a){let n,r=0;if(a.length>=s){const s=[[a,0]];for(const n of e.deviceData.paths.find(a,!0,!1,99)){const e=t.gpnPatterns.get(n);e&&s.push([n,e>>a.length<<a.length])}r=function e(t,s=0){const n={},a=[];let r=!1,i=0;for(const e of t){const t=e[0],o=e[1]>>s,c=t.segments[s];if(c){if(1&o){if(i=1,s>7)continue}else"*"===c&&(r=!0);"*"===c?a.push(e):(n[c]=n[c]||[],n[c].push(e))}else 1&o&&(i=1)}let o=0;!r&&a.length&&(o+=2*e(a,s+1));for(const t of Object.keys(n)){const r=e(n[t].concat(a),s+1);o-=r,i+=r}return i+=Math.max(0,o),i}(s)}if(r<Math.pow(2,Math.max(0,8-a.length)))n=!0,t.gpn.delete(a);else{n=!1;for(const s of e.deviceData.paths.find(a,!1,!0,99))t.gpn.delete(s)}return{name:"GetParameterNames",parameterPath:a.length?a.toString()+".":"",nextLevel:n}}}if(t.refreshAttributes.value.size){const s=qs(e.cacheSnapshot,"cwmp.gpvBatchSize",{},e.timestamp,t=>Ks(e,t)),n=[];for(const a of t.refreshAttributes.value){t.refreshAttributes.value.delete(a);const r=e.deviceData.attributes.get(a);if(r&&r.object&&0===r.object[1]&&(n.push(a.toString()),n.length>=s))break}if(n.length)return{name:"GetParameterValues",parameterNames:n}}if(t.refreshAttributes.notification.size||t.refreshAttributes.accessList.size){const s=qs(e.cacheSnapshot,"cwmp.gpvBatchSize",{},e.timestamp,t=>Ks(e,t)),n=[];for(const a of t.refreshAttributes.notification){t.refreshAttributes.notification.delete(a),t.refreshAttributes.accessList.delete(a);if(e.deviceData.attributes.get(a)&&(n.push(a.toString()),n.length>=s))break}if(n.length<s)for(const a of t.refreshAttributes.accessList){t.refreshAttributes.accessList.delete(a);if(e.deviceData.attributes.get(a)&&(n.push(a.toString()),n.length>=s))break}if(n.length)return{name:"GetParameterAttributes",parameterNames:n}}return null}(e),!e.rpcRequest)){if(e.deviceData.changes.has("prerequisite"))return delete e.syncState,function(e,t){if(Array.isArray(t)){for(const s of e.trackers.values())for(const e of t)delete s[e];for(const s of t)e.changes.delete(s)}else{for(const s of e.trackers.values())delete s[t];e.changes.delete(t)}}(e.deviceData,"prerequisite"),sn(e,null);let t;const s=e.timestamp+e.iteration+1;for(const[n,a]of e.syncState.tags){const r=e.deviceData.attributes.get(n);a&&!r?t=jt(e.deviceData,n,s,{object:[s,0],writable:[s,1],value:[s,[!0,"xsd:boolean"]]},t):r&&!a&&(t=jt(e.deviceData,n,s,null,t))}let r;for(const n of e.syncState.downloadsToCreate){if(null==r){r=0;for(const t of e.deviceData.paths.find(V.parse("Downloads.*"),!1,!0))+t.segments[1]>r&&e.deviceData.attributes.has(t)&&(r=+t.segments[1])}++r,t=jt(e.deviceData,V.parse("Downloads"),s,{object:[s,1],writable:[s,1]},t),t=jt(e.deviceData,V.parse("Downloads."+r),s,{object:[s,1],writable:[s,1]},t);const a={FileType:{writable:1,value:[n.FileType||"","xsd:string"]},FileName:{writable:1,value:[n.FileName||"","xsd:string"]},TargetFileName:{writable:1,value:[n.TargetFileName||"","xsd:string"]},Download:{writable:1,value:[n.Download||0,"xsd:dateTime"]},LastFileType:{writable:0,value:["","xsd:string"]},LastFileName:{writable:0,value:["","xsd:string"]},LastTargetFileName:{writable:0,value:["","xsd:string"]},LastDownload:{writable:0,value:[0,"xsd:dateTime"]},StartTime:{writable:0,value:[0,"xsd:dateTime"]},CompleteTime:{writable:0,value:[0,"xsd:dateTime"]}};for(const[n,i]of Object.entries(a))t=jt(e.deviceData,V.parse(`Downloads.${r}.${n}`),s,{object:[s,0],writable:[s,i.writable],value:[s,i.value]},t);t=jt(e.deviceData,V.parse(`Downloads.${r}.*`),s,null,t)}e.syncState.downloadsToCreate.clear();for(const n of e.syncState.downloadsToDelete){t=jt(e.deviceData,n,s,null,t);for(const t of e.syncState.downloadsValues.keys())t.segments[1]===n.segments[1]&&e.syncState.downloadsValues.delete(t)}e.syncState.downloadsToDelete.clear();for(const[n,a]of e.syncState.downloadsValues){const r=e.deviceData.attributes.get(n);if(r&&r.writable&&r.writable[1]&&r.value){const i=Nt([a,r.value[1][1]]);i[0]!==r.value[1][0]&&(t=jt(e.deviceData,n,s,{value:[s,i]},t))}}if(t||e.deviceData.changes.has("prerequisite")){if(t)for(const s of t)Lt(e.deviceData,s[0],s[1],s[2],s[3]);return sn(e,null)}a=function(e,t){let s;if(t)for(const n of t)if(n[2]&&null!=n[2].value){const t=e.deviceData.attributes.get(n[0]);if(t&&t.writable&&t.writable[1]&&t.value&&null!=t.value[1]){const e=n[2].value.slice();if(null==e[1]&&(e[1]=t.value[1][1]),Nt(e),e[0]!==t.value[1][0]||e[1]!==t.value[1][1]){s||(s=[]);const a={},r={};for(const[e,s]of Object.entries(t))a[e]=s[0],r[e]=s[1];s.push([n[0].segments[1],{},{value:e},a,r])}}}return s}(e,e.syncState.virtualParameterDeclarations[n]),a||(e.rpcRequest=function(e){const t=e.syncState;if(!t)return null;const s=e.deviceData;for(const s of t.instancesToDelete.values()){const t=s.values().next().value;if(t&&e.deviceData.attributes.has(t))return{name:"DeleteObject",objectName:t.toString()+"."}}for(const[s,n]of t.instancesToCreate)if(e.deviceData.attributes.has(s)){const e=n.values().next().value;if(e)return n.delete(e),{name:"AddObject",objectName:s.toString()+".",instanceValues:e,next:"getInstanceKeys"}}const n=qs(e.cacheSnapshot,"cwmp.gpvBatchSize",{},e.timestamp,t=>Ks(e,t)),a=!!qs(e.cacheSnapshot,"cwmp.datetimeMilliseconds",{},e.timestamp,t=>Ks(e,t)),r=!!qs(e.cacheSnapshot,"cwmp.booleanLiteral",{},e.timestamp,t=>Ks(e,t)),i=[];for(const[s,r]of t.spv){t.spv.delete(s);const o=e.deviceData.attributes.get(s),c=o.value?o.value[1]:null;if(c&&o.writable&&o.writable[1]){const e=r.slice();if(e[1]||(e[1]=c[1]),Nt(e),"xsd:dateTime"!==e[1]||a||"number"!=typeof e[0]||(e[0]-=e[0]%1e3),e[0]===c[0]&&e[1]===c[1]||i.push([s.toString(),e[0],e[1]]),i.length>=n)break}}if(i.length)return{name:"SetParameterValues",parameterList:i,DATETIME_MILLISECONDS:a,BOOLEAN_LITERAL:r};const o=[];for(const[s,a]of t.spa){t.spa.delete(s);const r=e.deviceData.attributes.get(s);if(null==a.notification||r.notification&&a.notification!==r.notification[1]||(a.notification=null),null==a.accessList||r.accessList&&!nn(a.accessList,r.accessList[1])||(a.accessList=null),null==a.notification&&null==a.accessList||o.push([s.toString(),a.notification,a.accessList]),o.length>=n)break}if(o.length)return{name:"SetParameterAttributes",parameterList:o};for(const[n,a]of t.downloadsDownload){const t=s.attributes.get(n);if(!(t&&t.value&&a<=t.value[1][0])){const t=s.attributes.get(s.paths.get(n.slice(0,-1).concat(V.parse("FileType")))),a=s.attributes.get(s.paths.get(n.slice(0,-1).concat(V.parse("FileName")))),r=s.attributes.get(s.paths.get(n.slice(0,-1).concat(V.parse("TargetFileName"))));return{name:"Download",commandKey:Hs(e),instance:n.segments[1],fileType:t&&t.value?t.value[1][0]:null,fileName:a&&a.value?a.value[1][0]:null,targetFileName:r&&r.value?r.value[1][0]:null}}}if(t.reboot){const s=e.deviceData.paths.get(V.parse("Reboot")),n=s?e.deviceData.attributes.get(s):null;if(!(n&&n.value&&n.value[1][0]>=t.reboot))return delete t.reboot,{name:"Reboot"}}if(t.factoryReset){const s=e.deviceData.paths.get(V.parse("FactoryReset")),n=s?e.deviceData.attributes.get(s):null;if(!(n&&n.value&&n.value[1][0]>=t.factoryReset))return delete t.factoryReset,{name:"FactoryReset"}}return null}(e))}if(a)return e.virtualParameters.push(a),e.revisions.push(e.revisions[n]),sn(e,null);if(e.rpcRequest)return{fault:null,rpcId:Hs(e),rpc:e.rpcRequest};++e.revisions[n],e.declarations.pop(),e.syncState.virtualParameterDeclarations.pop();const r=e.provisionsRet.splice(n)[0];if(!r)return sn(e,null);e.revisions.pop();const i=e.revisions[e.revisions.length-1]||0;e.deviceData.timestamps.collapse(i+1),e.deviceData.attributes.collapse(i+1),e.deviceData.timestamps.revision=i+1,e.deviceData.attributes.revision=i+1;for(const t of Object.keys(e.extensionsCache))i<Number(t.split(":",1)[0])&&delete e.extensionsCache[t];const o=e.virtualParameters.pop();if(!o)return{fault:null,rpcId:null,rpc:null};const c=e.timestamp+e.iteration;let l;for(const[t,s]of r.entries()){for(const[e,n]of Object.entries(s))s[e]=[c+(null!=o[t][2][e]?1:0),n];l=jt(e.deviceData,V.parse("VirtualParameters."+o[t][0]),c,s,l)}if(l)for(const t of l)Lt(e.deviceData,t[0],t[1],t[2],t[3]);return sn(e,null)}function nn(e,t){if(e.length!==t.length)return!1;for(const[s,n]of e.entries())if(n!==t[s])return!1;return!0}function an(e,t,s,n,a,r,i){let o,c;if("Downloads"===(t=e.deviceData.paths.add(t)).segments[0]){if(1!==t.length)return;c=e.syncState.downloadsToDelete,o=e.syncState.downloadsToCreate}else c=e.syncState.instancesToDelete.get(t),null==c&&(c=new Set,e.syncState.instancesToDelete.set(t,c)),o=e.syncState.instancesToCreate.get(t),null==o&&(o=new Bs,e.syncState.instancesToCreate.set(t,o));if(i&&0===o.size&&0===c.size)return;let l=0;for(const e of s)++l,l>r?c.add(e):l<=a&&c.delete(e);if(n){for(const e of o.superset(n))++l,l>r&&o.delete(e);for(const e of o.subset(n))++l,l<=a&&(o.delete(e),o.add(JSON.parse(JSON.stringify(n))));for(;l<a;)++l,o.add(JSON.parse(JSON.stringify(n)))}}async function rn(e){const t=JSON.parse(e);for(const e of t.declarations)for(const t of e)t.path=V.parse(t.path);const s=Js();for(const e of t.deviceData){const t=s.paths.add(V.parse(e[0]));e[1]&&s.trackers.set(t,e[1]),e[2]&&(s.timestamps.setRevisions(t,e[2]),e[3]&&s.attributes.setRevisions(t,e[3]))}return t.deviceData=s,await $s(),t}const on=""+L("DEBUG_FILE"),cn=""+L("DEBUG_FORMAT"),ln=new WeakMap;function un(e){let t=ln.get(e);return t||(t=new Date,ln.set(e,t)),t}function fn(e,s,n){if(!on)return;const a=new Date,r=e.connection,i={event:"incoming HTTP request",timestamp:a,remoteAddress:r.remoteAddress,deviceId:s,connection:un(r),localPort:r.localPort,method:e.method,url:e.url,headers:e.headers,body:n};if("yaml"===cn)t.appendFileSync(on,"---\n"+w.stringify(i));else{if("json"!==cn)throw new Error("Unrecognized DEBUG_FORMAT option");t.appendFileSync(on,JSON.stringify(i)+"\n")}}function dn(e,s,n){if(!on)return;const a=new Date,r=e.connection,i={event:"outgoing HTTP response",timestamp:a,remoteAddress:r.remoteAddress,deviceId:s,connection:un(r),statusCode:e.statusCode,headers:e.getHeaders(),body:n};if("yaml"===cn)t.appendFileSync(on,"---\n"+w.stringify(i));else{if("json"!==cn)throw new Error("Unrecognized DEBUG_FORMAT option");t.appendFileSync(on,JSON.stringify(i)+"\n")}}const pn=h.promisify(l.gzip),mn=h.promisify(l.deflate),hn=+L("MAX_CONCURRENT_REQUESTS"),gn=new WeakMap,wn=new WeakMap,vn={concurrentRequests:0,totalRequests:0,droppedRequests:0,initiatedSessions:0};async function bn(e,t){const s=function(e,t){const s=xs.get(e);if(!s)throw new Error("Cache snapshot does not exist");return s.config[t]}(e.cacheSnapshot,"cwmp.auth");if(console.log("gyubeom ::",e),!s)return!0;let n;if(e.httpRequest.headers.authorization&&(n=st(e.httpRequest.headers.authorization)),n&&"Digest"===n.method){const s=wn.get(e.httpRequest.connection);if(!s||n.nonce!==s||n.qop&&(!n.cnonce||!n.nc))return!1;n.body=t}const a=await Ds(s,{},e.timestamp,async t=>{if(t=Ks(e,t),Array.isArray(t)&&"FUNC"===t[0]){if("EXT"===t[1]){if("string"!=typeof t[2]||"string"!=typeof t[3])return null;for(let e=4;e<t.length;e++)if(Array.isArray(t[e]))return null;const{fault:e,value:s}=await Gt(t.slice(2));return e?null:s}if("AUTH"===t[1]){const e=t[2],s=t[3];if(null!=e&&null!=s&&n){if("Basic"===n.method)return n.username===t[2]&&n.password===t[3];if("Digest"===n.method){return function(e,t,s,n,a,r,i,o,c,l){const f=u.createHash("md5");f.update(e).update(":").update(t).update(":").update(s);const d=f.digest("hex"),p=u.createHash("md5");if(p.update(a).update(":").update(r),"auth-int"===i){const e=u.createHash("md5").update(o||"").digest("hex");p.update(":").update(e)}const m=p.digest("hex"),h=u.createHash("md5");return h.update(d).update(":").update(n),i&&h.update(":").update(l).update(":").update(c).update(":").update(i),h.update(":").update(m),h.digest("hex")}(e,"GenieACS",s,n.nonce,"POST",n.uri,n.qop,n.body,n.cnonce,n.nc)===n.response}}return!1}}return t});return!(!a||Array.isArray(a))}async function yn(e,t,s=!1){s&&(t.headers.Connection="close");let a=t.data;if(e.httpRequest.headers["content-encoding"]&&t.data.length>0)switch(e.httpRequest.headers["content-encoding"]){case"gzip":t.headers["Content-Encoding"]="gzip",a=await pn(a);break;case"deflate":t.headers["Content-Encoding"]="deflate",a=await mn(a)}const r=e.httpResponse,i=r.connection;if(r.setHeader("Content-Length",Buffer.byteLength(a)),r.writeHead(t.code,t.headers),e.debug&&dn(r,e.deviceId,t.data),r.end(a),i.destroyed)ze({sessionContext:e,message:"Connection dropped"});else if(s){await async function(e){let t=null!=e.cacheUntil;const s=[];if(s.push(de(e.deviceId,e.deviceData,e.new,e.timestamp)),e.operationsTouched)for(const n of Object.keys(e.operationsTouched))t=!0,e.operations[n]?s.push(ve(e.deviceId,n,e.operations[n])):s.push(be(e.deviceId,n));e.doneTasks&&e.doneTasks.length&&(t=!0,s.push(async function(e,t){await B.deleteMany({_id:{$in:t.map(e=>new n.ObjectID(e))}})}(e.deviceId,e.doneTasks)));if(e.faultsTouched)for(const n of Object.keys(e.faultsTouched))t=!0,e.faults[n]?(e.faults[n].retries=e.retries[n],s.push(me(e.deviceId,n,e.faults[n]))):s.push(he(e.deviceId,n));t&&s.push(async function(e,t,s,n,a){const r={tasks:null,faults:null,operations:null};t.length&&(r.tasks=t);Object.keys(s).length&&(r.faults=s);Object.keys(n).length&&(r.operations=n);let i;i=a?Math.trunc((Date.now()-a)/1e3):L("MAX_CACHE_TTL",e);await ds(e+"_tasks_faults_operations",JSON.stringify(r),i)}(e.deviceId,e.tasks,e.faults,e.operations,e.cacheUntil));return await Promise.all(s),e.new}(e)&&We({sessionContext:e,message:"New device registered"})}else e.lastActivity=Date.now(),gn.set(i,e)}function Sn(e,t,s,n){s||(s=e.provisions,n=e.channels);const a=Object.keys(n);if(!a.length)throw new Error("Fault not associated with a channel!");const r=e.faults;for(const s of a){const i=e.faults[s]?e.faults[s].provisions:[];if(r[s]=Object.assign({provisions:i,timestamp:e.timestamp},t),s.startsWith("task_")){const t=s.slice(5);for(const n of e.tasks)n._id===t&&n.expiry&&(r[s].expiry=n.expiry)}null!=e.retries[s]?++e.retries[s]:(e.retries[s]=0,1!==a.length&&(r[s].retryNow=!0)),0===n[s]&&(r[s].precondition=!0),e.faultsTouched||(e.faultsTouched={}),e.faultsTouched[s]=!0,Be({sessionContext:e,message:"Channel has faulted",fault:t,channel:s,retries:e.retries[s]})}for(let e=0;e<s.length;++e)for(const t of a)n[t]>>e&1&&r[t].provisions.push(s[e]);for(const e of a){const t=r[e].provisions;r[e].provisions=[],On(r[e].provisions,t)}Ys(e)}async function _n(e,t){const s=await async function(e,t){const s=e.timestamp+e.iteration+1,n=[[V.parse("DeviceID.Manufacturer"),s,{object:[s,0],writable:[s,0],value:[s,[t.deviceId.Manufacturer,"xsd:string"]]}],[V.parse("DeviceID.OUI"),s,{object:[s,0],writable:[s,0],value:[s,[t.deviceId.OUI,"xsd:string"]]}],[V.parse("DeviceID.ProductClass"),s,{object:[s,0],writable:[s,0],value:[s,[t.deviceId.ProductClass,"xsd:string"]]}],[V.parse("DeviceID.SerialNumber"),s,{object:[s,0],writable:[s,0],value:[s,[t.deviceId.SerialNumber,"xsd:string"]]}]];for(const e of t.parameterList){const t=e[0];n.push([t,s,{object:[s,0],value:[s,e.slice(1)]}])}n.push([V.parse("Events.Inform"),s,{object:[s,0],writable:[s,0],value:[s,[e.timestamp,"xsd:dateTime"]]}]);for(const a of t.event)n.push([V.parse("Events."+a.replace(/\s+/g,"_")),s,{object:[s,0],writable:[s,0],value:[s,[e.timestamp,"xsd:dateTime"]]}]);e.new&&(n.push([V.parse("DeviceID.ID"),s,{object:[s,0],writable:[s,0],value:[s,[e.deviceId,"xsd:string"]]}]),n.push([V.parse("Events.Registered"),s,{object:[s,0],writable:[s,0],value:[s,[e.timestamp,"xsd:dateTime"]]}])),e.deviceData.timestamps.revision=1,e.deviceData.attributes.revision=1;let a=null;for(const t of n)"Events"===t[0].segments[0]?jt(e.deviceData,t[0],t[1],t[2]):a=jt(e.deviceData,t[0],t[1],t[2],a);if(a)for(const t of a)Lt(e.deviceData,t[0],t[1],t[2],t[3]);return{name:"InformResponse"}}(e,t.cpeRequest),n=Et({id:t.id,acsResponse:s,cwmpVersion:e.cwmpVersion}),a=qs(e.cacheSnapshot,"cwmp.cookiesPath",{},e.timestamp,t=>Ks(e,t));return n.headers["Set-Cookie"]=a?`session=${e.sessionId}; Path=${a}`:"session="+e.sessionId,n}async function Dn(e,t){const{acsResponse:s,operation:n,fault:a}=await async function(e,t){const s=(e.revisions[e.revisions.length-1]||0)+1;e.deviceData.timestamps.revision=s,e.deviceData.attributes.revision=s;const n=t.commandKey,a=e.operations[n];if(!a)return{acsResponse:{name:"TransferCompleteResponse"},operation:null,fault:null};const r=a.args.instance;if(delete e.operations[n],e.operationsTouched||(e.operationsTouched={}),e.operationsTouched[n]=1,t.faultStruct&&"0"!==t.faultStruct.faultCode)return Xs(e,a.args.instance),{acsResponse:{name:"TransferCompleteResponse"},operation:a,fault:{code:"cwmp."+t.faultStruct.faultCode,message:t.faultStruct.faultString,detail:t.faultStruct,timestamp:a.timestamp}};let i=null;const o=e.timestamp+e.iteration+1;let c;if(c=e.deviceData.paths.add(V.parse(`Downloads.${r}.LastDownload`)),i=jt(e.deviceData,c,o,{value:[o,[a.timestamp,"xsd:dateTime"]]},i),c=e.deviceData.paths.add(V.parse(`Downloads.${r}.LastFileType`)),i=jt(e.deviceData,c,o,{value:[o,[a.args.fileType,"xsd:string"]]},i),c=e.deviceData.paths.add(V.parse(`Downloads.${r}.LastFileName`)),i=jt(e.deviceData,c,o,{value:[o,[a.args.fileName,"xsd:string"]]},i),c=e.deviceData.paths.add(V.parse(`Downloads.${r}.LastTargetFileName`)),i=jt(e.deviceData,c,o,{value:[o,[a.args.targetFileName,"xsd:string"]]},i),c=e.deviceData.paths.add(V.parse(`Downloads.${r}.StartTime`)),i=jt(e.deviceData,c,o,{value:[o,[+t.startTime,"xsd:dateTime"]]},i),c=e.deviceData.paths.add(V.parse(`Downloads.${r}.CompleteTime`)),i=jt(e.deviceData,c,o,{value:[o,[+t.completeTime,"xsd:dateTime"]]},i),i)for(const t of i)Lt(e.deviceData,t[0],t[1],t[2],t[3]);return{acsResponse:{name:"TransferCompleteResponse"},operation:a,fault:null}}(e,t.cpeRequest);n||Be({sessionContext:e,message:"Unrecognized command key",rpc:t}),a&&(Object.assign(e.retries,n.retries),Sn(e,a,n.provisions,n.channels));return yn(e,Et({id:t.id,acsResponse:s,cwmpVersion:e.cwmpVersion}))}function On(e,t){let s=!1;const n=new WeakMap;for(const t of e)n.set(t,JSON.stringify(t));for(let a=t.length-1;a>=0;--a){let r=t[a];const i=JSON.stringify(r);for(let o=e.length-1;o>=0;--o){i===n.get(e[o])&&(!r||o>=e.length-(t.length-a)?r=null:(e.splice(o,1),s=!0))}r&&(e.splice(e.length-(t.length-a)+1,0,r),n.set(r,i),s=!0)}return s}async function Rn(e){const t=e.deviceData,s=function(e){const t=xs.get(e);if(!t)throw new Error("Cache snapshot does not exist");return t.presets}(e.cacheSnapshot),n={};let a=null,r=null;const i=+qs(e.cacheSnapshot,"cwmp.retryDelay",{},e.timestamp,t=>Ks(e,t));if(e.faults)for(const[t,s]of Object.entries(e.faults)){let o=0;if(s.retryNow||(o=s.timestamp+i*Math.pow(2,e.retries[t])*1e3),o<=e.timestamp){a=t,r=s.provisions;break}n[t]=s.precondition?1:2}t.timestamps.revision=1,t.attributes.revision=1;const o={};for(const s of t.paths.find(V.parse("Events.*"),!1,!0)){const n=t.attributes.get(s);n&&n.value&&n.value[1][0]>=e.timestamp&&(o[s.segments[1]]=!0)}const c={},l=[];for(const t of s){if(null!=a){if(t.channel!==a)continue}else if(1===n[t.channel])continue;let s=!0;for(const[e,n]of Object.entries(t.events))if(!n!=!o[e.replace(/\s+/g,"_")]){s=!1;break}if(s){if(t.schedule&&t.schedule.schedule){if(!(Ht(e.timestamp,t.schedule.schedule)[0]+t.schedule.duration>e.timestamp))continue}l.push(t);for(const s of Os(_s(t.precondition,null,e.timestamp)))e.channels[t.channel]=0,"string"==typeof s&&(c[s]=V.parse(s));for(const s of t.provisions)for(const n of s.slice(1))for(const s of Os(_s(n,null,e.timestamp)))e.channels[t.channel]=0,"string"==typeof s&&(c[s]=V.parse(s))}}const u=Object.values(c).map(e=>({path:e,pathGet:1,pathSet:null,attrGet:{value:1},attrSet:null,defer:!0})),{fault:f,rpcId:d,rpc:p}=await sn(e,u);if(f)return Sn(e,f),Ys(e),Rn(e);if(p)return An(e,d,p);Ys(e),null!=a&&Zs(e,a,r);const m={};for(const t of l)if(_s(t.precondition,{},e.timestamp,t=>Ks(e,t))){const s=t.provisions.map(t=>[t[0],...t.slice(1).map(t=>_s(t,{},e.timestamp,t=>Ks(e,t)))]);2===n[t.channel]?m[t.channel]=(m[t.channel]||[]).concat(s):Zs(e,t.channel,s)}for(const[t,s]of Object.entries(m))On(e.faults[t].provisions,s)&&(e.faultsTouched||(e.faultsTouched={}),e.faultsTouched[t]=!0);if(null==a&&(e.presetCycles=(e.presetCycles||0)+1),e.presetCycles>4){const t={code:"preset_loop",message:"The presets are stuck in an endless configuration loop",timestamp:e.timestamp};Sn(e,t);for(const t of Object.values(e.faults))delete t.retryNow;return Ys(e),An(e)}t.timestamps.dirty=0,t.attributes.dirty=0;const{fault:h,rpcId:g,rpc:w}=await sn(e,null);if(h)return Sn(e,h),Ys(e),Rn(e);if(!w){for(const t of Object.keys(e.channels))e.faults[t]&&(delete e.faults[t],e.faultsTouched||(e.faultsTouched={}),e.faultsTouched[t]=!0);if(null!=a)return Rn(e);if(e.deviceData.timestamps.dirty>1||e.deviceData.attributes.dirty>1)return Rn(e)}return An(e,g,w)}async function xn(e){const{fault:t,rpcId:s,rpc:n}=await sn(e,null);if(t)return Sn(e,t),Ys(e),xn(e);if(n)return An(e,s,n);for(const[t,s]of Object.entries(e.channels))if(s&&e.faults[t]&&(delete e.faults[t],e.faultsTouched||(e.faultsTouched={}),e.faultsTouched[t]=!0),t.startsWith("task_")){const s=t.slice(5);e.doneTasks||(e.doneTasks=[]),e.doneTasks.push(s);for(let t=0;t<e.tasks.length;++t)if(e.tasks[t]._id===s){e.tasks.splice(t,1);break}}Ys(e),e.tasks=e.tasks.filter(t=>{if(!(t.expiry<=e.timestamp))return!0;We({sessionContext:e,message:"Task expired",task:t}),e.doneTasks||(e.doneTasks=[]),e.doneTasks.push(t._id);const s="task_"+t._id;return e.faults[s]&&(delete e.faults[s],e.faultsTouched||(e.faultsTouched={}),e.faultsTouched[s]=!0),!1});const a=e.tasks.find(t=>!e.faults["task_"+t._id]);if(!a)return Rn(e);let r;switch(a.name){case"getParameterValues":e.channels["task_"+a._id]=0;for(const t of a.parameterNames)Zs(e,"task_"+a._id,[["refresh",t]]);break;case"setParameterValues":e.channels["task_"+a._id]=0;for(const t of a.parameterValues)Zs(e,"task_"+a._id,[["value",t[0],t[1]]]);break;case"refreshObject":Zs(e,"task_"+a._id,[["refresh",a.objectName]]);break;case"reboot":Zs(e,"task_"+a._id,[["reboot"]]);break;case"factoryReset":Zs(e,"task_"+a._id,[["reset"]]);break;case"download":Zs(e,"task_"+a._id,[["download",a.fileType,a.fileName,a.targetFileName||""]]);break;case"addObject":r=(a.parameterValues||[]).map(e=>`${e[0]}:${JSON.stringify(e[1])}`).join(","),Zs(e,"task_"+a._id,[["instances",`${a.objectName}.[${r}]`,"+1"]]);break;case"deleteObject":Zs(e,"task_"+a._id,[["instances",a.objectName,0]]);break;case"provisions":Zs(e,"task_"+a._id,a.provisions);break;default:throw new Error("Task name not recognized")}return xn(e)}async function An(e,t,s){if(!s)return yn(e,Et(null),!0);if("Download"===s.name&&(s.fileSize=0,!s.url)){let t=""+L("FS_URL_PREFIX");if(!t){const s=+L("FS_PORT"),n=!!L("FS_SSL_CERT"),a=De(e.httpRequest);let r=a.localAddress;a.host&&([r]=a.host.split(":",1)),t=(n?"https":"http")+`://${r}:${s}/`}s.url=t+encodeURI(s.fileName);const n=function(e){const t=xs.get(e);if(!t)throw new Error("Cache snapshot does not exist");return t.files}(e.cacheSnapshot);n[s.fileName]&&(s.fileSize=n[s.fileName].length)}const n={id:t,acsRequest:s,cwmpVersion:e.cwmpVersion};We({sessionContext:e,message:"ACS request",rpc:n});return yn(e,Et(n))}async function Tn(e,t){const s=gn.get(e);if(s)return gn.delete(e),s;if(!t)return null;await new Promise(e=>setTimeout(e,100));const n=await async function(e){const t=await os.findOneAndDelete({_id:e});return t&&t.value&&+t.value.expire-(Date.now()-cs)?t.value.value:null}("session_"+t);return n?rn(n):null}const En=new WeakMap;function In(e){En.set(e,e.remoteAddress),e.on("close",async()=>{const t=gn.get(e);if(!t)return;gn.delete(e);const s=Date.now(),n=t.lastActivity,a=je({sessionContext:t,message:"Session timeout",sessionTimestamp:t.timestamp}),r=t.lastActivity+1e3*t.timeout-s;if(r<=0)return void ze(a);if(setTimeout(async()=>{const e=await fs("session_"+t.sessionId);if(!e)return;(await rn(e)).lastActivity===n&&ze(a)},r+1e3).unref(),0===t.state)return;const i=await async function(e){const t=[];for(const s of e.deviceData.paths.find(V.parse(""),!1,!1,99)){const n=[s.toString(),e.deviceData.trackers.get(s)||null,e.deviceData.timestamps.getRevisions(s)||null,e.deviceData.attributes.getRevisions(s)||null];t.push(n)}const s=e.declarations.map(e=>e.map(e=>Object.assign({},e,{path:e.path.toString()}))),n=Object.assign({},e,{deviceData:t,declarations:s,syncState:null,toLoad:null,httpRequest:null,httpResponse:null});return JSON.stringify(n)}(t);await ds("session_"+t.sessionId,i,Math.ceil(r/1e3)+3)})}async function Nn(e){ze({message:"Bad session state",sessionContext:e});const t=e.httpResponse;gn.delete(t.connection);const s="Bad session state";t.setHeader("Content-Length",Buffer.byteLength(s)),t.writeHead(400,{Connection:"close"}),e.debug&&dn(t,e.deviceId,s),t.end(s)}async function Cn(e,t){const s={};if(t)ze({message:"Authentication failure",sessionContext:e}),s.Connection="close";else{if(De(e.httpRequest).encrypted)s["WWW-Authenticate"]='Basic realm="GenieACS"';else{const t=u.randomBytes(16).toString("hex");wn.set(e.httpRequest.connection,t);let n='Digest realm="GenieACS"';n+=',qop="auth,auth-int"',n+=`,nonce="${t}"`,s["WWW-Authenticate"]=n}gn.set(e.httpRequest.connection,e)}const n=e.httpResponse,a="Unauthorized";n.setHeader("Content-Length",Buffer.byteLength(a)),n.writeHead(401,s),e.debug&&dn(n,e.deviceId,a),n.end(a)}async function kn(e,t,s,n){for(const n of s)n.sessionContext=e,n.rpc=t,Be(n);if(0===e.state){if(!t.cpeRequest||"Inform"!==t.cpeRequest.name)return Nn(e);const s=await _n(e,t);e.debug=!!qs(e.cacheSnapshot,"cwmp.debug",{},e.timestamp,t=>Ks(e,t)),e.timeout||(e.timeout=+qs(e.cacheSnapshot,"cwmp.sessionTimeout",{},e.timestamp,t=>Ks(e,t))),e.debug&&fn(e.httpRequest,e.deviceId,n);return await bn(e,n)?(e.state=1,e.authState=2,We({sessionContext:e,message:"Inform",rpc:t}),yn(e,s)):e.authState?Cn(e,!0):(e.authState=1,Cn(e,!1))}if(e.debug&&fn(e.httpRequest,e.deviceId,n),2!==e.authState){if(!await bn(e,n))return e.authState?Cn(e,!0):(e.authState=1,Cn(e,!1));e.authState=2}if(t.cpeRequest){if("TransferComplete"===t.cpeRequest.name)return 1!==e.state?Nn(e):(We({sessionContext:e,message:"CPE request",rpc:t}),Dn(e,t));if("GetRPCMethods"===t.cpeRequest.name){if(1!==e.state)return Nn(e);We({sessionContext:e,message:"CPE request",rpc:t});const s=Et({id:t.id,acsResponse:{name:"GetRPCMethodsResponse",methodList:["Inform","GetRPCMethods","TransferComplete"]},cwmpVersion:e.cwmpVersion});return yn(e,s)}if(1!==e.state||"Inform"===t.cpeRequest.name)return void Nn(e);throw new Error("ACS method not supported")}if(t.cpeResponse)return 2!==e.state?Nn(e):(await async function(e,t,s){if(t!==Hs(e))throw new Error("Request ID not recognized");++e.rpcCount;const n=s,a=e.rpcRequest;if(a.next){if("getInstanceKeys"===a.next){const t=[],s={},r=a,i=n;for(const[e,n]of Object.entries(r.instanceValues)){const a=`${r.objectName}${i.instanceNumber}.${e}`;t.push(a),s[a]=n}if(t.length){const n={name:"GetParameterValues",parameterNames:t,next:"setInstanceKeys",instanceValues:s};e.rpcRequest=n}else e.rpcRequest=null}else if("setInstanceKeys"===a.next){const t=a,s=n,r=[];for(const e of s.parameterList)if(e[1]!==t.instanceValues[e[0].toString()]){const s=Nt([t.instanceValues[e[0].toString()],e[2]]);r.push([e[0].toString(),s[0],s[1]])}if(r.length){const t={name:"SetParameterValues",parameterList:r,DATETIME_MILLISECONDS:!!qs(e.cacheSnapshot,"cwmp.datetimeMilliseconds",{},e.timestamp,t=>Ks(e,t)),BOOLEAN_LITERAL:!!qs(e.cacheSnapshot,"cwmp.booleanLiteral",{},e.timestamp,t=>Ks(e,t))};e.rpcRequest=t}else e.rpcRequest=null}}else e.rpcRequest=null;const r=e.timestamp+e.iteration,i=(e.revisions[e.revisions.length-1]||0)+1;let o;if(e.deviceData.timestamps.revision=i,e.deviceData.attributes.revision=i,"GetParameterValuesResponse"===n.name){if("GetParameterValues"!==a.name)throw new Error("Response name does not match request name");for(const t of n.parameterList)o=jt(e.deviceData,t[0],r,{object:[r,0],value:[r,t.slice(1)]},o)}else if("GetParameterAttributesResponse"===n.name){if("GetParameterAttributes"!==a.name)throw new Error("Response name does not match request name");for(const t of n.parameterList)o=jt(e.deviceData,t[0],r,{notification:[r,t[1]],accessList:[r,t[2]]},o)}else if("GetParameterNamesResponse"===n.name){if("GetParameterNames"!==a.name)throw new Error("Response name does not match request name");let t;t=a.parameterPath.endsWith(".")?V.parse(a.parameterPath.slice(0,-1)):V.parse(a.parameterPath),n.parameterList.sort((e,t)=>{const s=e[0],n=t[0],a=Math.min(s.length,n.length);for(let e=0;e<a;++e){if(s.segments[e]>n.segments[e])return 1;if(s.segments[e]<n.segments[e])return-1}return s.length-n.length});for(let e=1;e<n.parameterList.length;++e){const t=n.parameterList[e-1][0],s=n.parameterList[e][0];let a=0;for(let r=s.length-2;r>=0;--r){if(r<t.length&&t.segments[r]===s.segments[r]){r===t.length-1&&(n.parameterList[e-1][1]=!0);break}n.parameterList.splice(e,0,[s.slice(0,r+1),!0,!0]),++a}e+=a}if(!t.length)for(const t of["DeviceID","Events","Tags","Reboot","FactoryReset","VirtualParameters","Downloads"]){const s=e.deviceData.paths.get(V.parse(t));s&&e.deviceData.attributes.has(s)&&e.deviceData.timestamps.set(s,r)}const s=V.parse("*"),i=[t.concat(s)];for(const[t,c,l]of n.parameterList)c&&!a.nextLevel&&i.push(t.concat(s)),o=jt(e.deviceData,t,r,{object:[r,c?1:0],writable:[r,l?1:0]},o);for(const t of i)o=jt(e.deviceData,t,r,null,o)}else if("SetParameterValuesResponse"===n.name){if("SetParameterValues"!==a.name)throw new Error("Response name does not match request name");for(const t of a.parameterList)o=jt(e.deviceData,V.parse(t[0]),r+1,{object:[r+1,0],writable:[r+1,1],value:[r+1,t.slice(1)]},o)}else if("SetParameterAttributesResponse"===n.name){if("SetParameterAttributes"!==a.name)throw new Error("Response name does not match request name");for(const t of a.parameterList){let s;null!=t[1]&&null!=t[2]?s={notification:[r+1,t[1]],accessList:[r+1,t[2]]}:null!=t[1]?s={notification:[r+1,t[1]]}:null!=t[2]&&(s={accessList:[r+1,t[2]]}),o=jt(e.deviceData,V.parse(t[0]),r+1,s,o)}}else if("AddObjectResponse"===n.name){if("AddObject"!==a.name)throw new Error("Response name does not match request name");o=jt(e.deviceData,V.parse(a.objectName+n.instanceNumber),r+1,{object:[r+1,1]},o)}else if("DeleteObjectResponse"===n.name){if("DeleteObject"!==a.name)throw new Error("Response name does not match request name");o=jt(e.deviceData,V.parse(a.objectName.slice(0,-1)),r+1,null,o)}else if("RebootResponse"===n.name){if("Reboot"!==a.name)throw new Error("Response name does not match request name");o=jt(e.deviceData,V.parse("Reboot"),r+1,{value:[r+1,[e.timestamp,"xsd:dateTime"]]},o)}else if("FactoryResetResponse"===n.name){if("FactoryReset"!==a.name)throw new Error("Response name does not match request name");o=jt(e.deviceData,V.parse("FactoryReset"),r+1,{value:[r+1,[e.timestamp,"xsd:dateTime"]]},o)}else{if("DownloadResponse"!==n.name)throw new Error("Response name not recognized");if("Download"!==a.name)throw new Error("Response name does not match request name");if(o=jt(e.deviceData,V.parse(`Downloads.${a.instance}.Download`),r+1,{value:[r+1,[e.timestamp,"xsd:dateTime"]]},o),0===n.status)o=jt(e.deviceData,V.parse(`Downloads.${a.instance}.LastDownload`),r+1,{value:[r+1,[e.timestamp,"xsd:dateTime"]]},o),o=jt(e.deviceData,V.parse(`Downloads.${a.instance}.LastFileType`),r+1,{value:[r+1,[a.fileType,"xsd:string"]]},o),o=jt(e.deviceData,V.parse(`Downloads.${a.instance}.LastFileName`),r+1,{value:[r+1,[a.fileType,"xsd:string"]]},o),o=jt(e.deviceData,V.parse(`Downloads.${a.instance}.LastTargetFileName`),r+1,{value:[r+1,[a.fileType,"xsd:string"]]},o),o=jt(e.deviceData,V.parse(`Downloads.${a.instance}.StartTime`),r+1,{value:[r+1,[+n.startTime,"xsd:dateTime"]]},o),o=jt(e.deviceData,V.parse(`Downloads.${a.instance}.CompleteTime`),r+1,{value:[r+1,[+n.completeTime,"xsd:dateTime"]]},o);else{const t={name:"Download",timestamp:e.timestamp,provisions:e.provisions,channels:e.channels,retries:{},args:{instance:a.instance,fileType:a.fileType,fileName:a.fileName,targetFileName:a.targetFileName}};for(const s of Object.keys(e.channels))null!=e.retries[s]&&(t.retries[s]=e.retries[s]);e.operations[a.commandKey]=t,e.operationsTouched||(e.operationsTouched={}),e.operationsTouched[a.commandKey]=1}}if(o)for(const t of o)Lt(e.deviceData,t[0],t[1],t[2],t[3])}(e,t.id,t.cpeResponse),xn(e));if(t.cpeFault){if(2!==e.state)return Nn(e);Be({sessionContext:e,message:"CPE fault",rpc:t});const s=await async function(e,t,s){const n=e.rpcRequest;if(delete e.syncState,delete e.rpcRequest,++e.rpcCount,"9005"===s.detail.faultCode){const t=e.timestamp+e.iteration+1,s=(e.revisions[e.revisions.length-1]||0)+1;let a;if(e.deviceData.timestamps.revision=s,e.deviceData.attributes.revision=s,"GetParameterNames"===n.name?n.parameterPath&&(a=[[V.parse(n.parameterPath.replace(/\.$/,"")),t]]):"GetParameterValues"===n.name?a=n.parameterNames.map(e=>[V.parse(e.replace(/\.$/,"")),t]):"SetParameterValues"===n.name?a=n.parameterList.map(e=>[V.parse(e[0].replace(/\.$/,"")),t]):"AddObject"===n.name||"DeleteObject"===n.name?a=[[V.parse(n.objectName.replace(/\.$/,"")),t]]:"GetParameterAttributes"===n.name?a=n.parameterNames.map(e=>[V.parse(e.replace(/\.$/,"")),t]):"SetParameterAttributes"===n.name&&(a=n.parameterList.map(e=>[V.parse(e[0].replace(/\.$/,"")),t])),a)for(const t of a)Lt(e.deviceData,t[0],t[1],t[2],t[3]);return null}return{code:"cwmp."+s.detail.faultCode,message:s.detail.faultString,detail:s.detail}}(e,t.id,t.cpeFault);return s&&(Sn(e,s),Ys(e)),xn(e)}{if(1!==e.state)return Nn(e);e.state=2;const{faults:t,operations:s}=await async function(e){const t=(e.revisions[e.revisions.length-1]||0)+1;e.deviceData.timestamps.revision=t,e.deviceData.attributes.revision=t;const s=[],n=[];for(const[t,a]of Object.entries(e.operations)){if("Download"!==a.name)throw new Error("Unknown operation name "+a.name);const r=1e3*+qs(e.cacheSnapshot,"cwmp.downloadTimeout",{},e.timestamp,t=>Ks(e,t));e.timestamp>a.timestamp+r&&(delete e.operations[t],e.operationsTouched||(e.operationsTouched={}),e.operationsTouched[t]=1,s.push({code:"timeout",message:"Download operation timed out",timestamp:a.timestamp}),n.push(a),Xs(e,a.args.instance))}return{faults:s,operations:n}}(e);for(const[n,a]of t.entries()){for(const[t,a]of Object.entries(s[n].retries))e.retries[t]=a;Sn(e,a,s[n].provisions,s[n].channels)}return xn(e)}}function Ln(e,t){vn.concurrentRequests+=1,async function(e,t){if(vn.totalRequests+=1,"POST"!==e.method)return t.writeHead(405,{Allow:"POST",Connection:"close"}),void t.end("405 Method Not Allowed");let s;const n=/\s*([a-zA-Z0-9\-_]+?)\s*=\s*"?([a-zA-Z0-9\-_]*?)"?\s*(,|;|$)/g;let a;for(;a=n.exec(e.headers.cookie);)"session"===a[1]&&(s=a[2]);if(!s&&vn.concurrentRequests>hn)return t.writeHead(503,{"Retry-after":60,Connection:"close"}),t.end("503 Service Unavailable"),void(vn.droppedRequests+=1);let r=e;if(e.headers["content-encoding"])switch(e.headers["content-encoding"]){case"gzip":r=e.pipe(l.createGunzip());break;case"deflate":r=e.pipe(l.createInflate());break;default:return t.writeHead(415,{Connection:"close"}),void t.end("415 Unsupported Media Type")}const i=await new Promise((t,s)=>{const n=[];let a=0;r.on("data",e=>{n.push(e),a+=e.length}),r.on("end",()=>{const e=Buffer.allocUnsafe(a);let s=0;for(const t of n)t.copy(e,s,0,t.length),s+=t.length;t(e)}),r.on("error",s),e.on("aborted",()=>{t(null)})});if(!i)return;const o=!gn.has(e.connection),c=await Tn(e.connection,s);if(c){if(c.httpRequest=e,c.httpResponse=t,o&&c.sessionId!==s||c.lastActivity+1e3*c.timeout<Date.now()){ze({message:"Invalid session",sessionContext:c});const e="Invalid session";return t.setHeader("Content-Length",Buffer.byteLength(e)),t.writeHead(400,{Connection:"close"}),c.debug&&dn(t,c.deviceId,e),void t.end(e)}o&&1!==c.authState&&(c.authState=0)}else if(vn.concurrentRequests>hn)return t.writeHead(503,{"Retry-after":60,Connection:"close"}),t.end("503 Service Unavailable"),void(vn.droppedRequests+=1);let f;if(e.headers["content-type"]){const t=e.headers["content-type"].match(/charset=['"]?([^'"\s]+)/i);t&&(f=t[1].toLowerCase())}if(!f){const e=function(e){for(const t of["utf16le","utf8","latin1","ascii"]){let s=e.toString(t,0,150);if(s.startsWith("<?xml")){s=s.split("\n")[0].trim();try{return nt(s.slice(5,-2))}catch(e){}}}return null}(i),t=e?e.find(e=>"encoding"===e.localName):null;f=t?t.value.toLowerCase():"utf8"}const d=function(e,t){try{return e.toString(t)}catch(s){if(g.encodingExists(t))return g.decode(e,t)}return null}(i,f);if(null==d){const s=`Unknown encoding '${f}'`;if(ze({message:"XML parse error",parseError:s,sessionContext:c||{httpRequest:e,httpResponse:t}}),t.setHeader("Content-Length",Buffer.byteLength(s)),t.writeHead(400,{Connection:"close"}),c)c.debug&&(fn(e,c.deviceId,i.toString()),dn(t,c.deviceId,s));else{!!qs(await $s(),"cwmp.debug",{remoteAddress:De(e).remoteAddress},Date.now(),t=>Array.isArray(t)&&"FUNC"===t[0]&&"REMOTE_ADDRESS"===t[1]?De(e).remoteAddress:t)&&(fn(e,null,i.toString()),dn(t,null,s))}return void t.end(s)}const p=[];let m;try{m=At(d,c?c.cwmpVersion:null,p)}catch(s){if(ze({message:"XML parse error",parseError:s.message.trim(),sessionContext:c||{httpRequest:e,httpResponse:t}}),t.setHeader("Content-Length",Buffer.byteLength(s.message)),t.writeHead(400,{Connection:"close"}),c)c.debug&&(fn(e,c.deviceId,d),dn(t,c.deviceId,s.message));else{!!qs(await $s(),"cwmp.debug",{remoteAddress:De(e).remoteAddress},Date.now(),t=>Array.isArray(t)&&"FUNC"===t[0]&&"REMOTE_ADDRESS"===t[1]?De(e).remoteAddress:t)&&(fn(e,null,d),dn(t,null,s.message))}return void t.end(s.message)}if(c)return kn(c,m,p,d);if(!m.cpeRequest||"Inform"!==m.cpeRequest.name){ze({message:"Invalid session",sessionContext:c||{httpRequest:e,httpResponse:t}});const s="Invalid session";t.setHeader("Content-Length",Buffer.byteLength(s)),t.writeHead(400,{Connection:"close"});return!!qs(await $s(),"cwmp.debug",{remoteAddress:De(e).remoteAddress},Date.now(),t=>Array.isArray(t)&&"FUNC"===t[0]&&"REMOTE_ADDRESS"===t[1]?De(e).remoteAddress:t)&&dn(t,c.deviceId,s),void t.end(s)}vn.initiatedSessions+=1;const h=function(e){function t(e){return e.replace(/[^A-Za-z0-9_]/g,e=>{const t=Buffer.from(e,"utf8");let s="";for(const e of t)s+="%"+e.toString(16).toUpperCase();return s})}return e.ProductClass?t(e.OUI)+"-"+t(e.ProductClass)+"-"+t(e.SerialNumber):t(e.OUI)+"-"+t(e.SerialNumber)}(m.cpeRequest.deviceId),w=await $s(),v=function(e,t,s){return{timestamp:Date.now(),deviceId:e,deviceData:Js(),cwmpVersion:t,timeout:s,provisions:[],channels:{},virtualParameters:[],revisions:[0],rpcCount:0,iteration:0,cycle:0,extensionsCache:{},declarations:[],state:0,authState:0}}(h,m.cwmpVersion,m.sessionTimeout);v.cacheSnapshot=w,v.httpRequest=e,v.httpResponse=t,v.sessionId=u.randomBytes(8).toString("hex"),e.connection.setTimeout(1e3*v.timeout);const{tasks:b,faults:y,operations:S,ttl:_}=await async function(e,t){const s=await fs(e+"_tasks_faults_operations");if(s){const e=JSON.parse(s);return{tasks:e.tasks||[],faults:e.faults||{},operations:e.operations||{},ttl:0}}const n=await Promise.all([ge(e,t),pe(e),we(e)]);return{tasks:n[0][0],faults:n[1],operations:n[2],ttl:n[0][1]||0}}(h,v.timestamp);v.tasks=b,v.operations=S,v.cacheUntil=_,v.faults=y,v.retries={};for(const[e,t]of Object.entries(v.faults))t.expiry>=v.timestamp?(delete v.faults[e],v.faultsTouched||(v.faultsTouched={}),v.faultsTouched[e]=!0):v.retries[e]=t.retries;const D=await async function(e,t){const s=[[V.parse("Events"),t,{object:[t,1],writable:[t,0]}],[V.parse("DeviceID"),t,{object:[t,1],writable:[t,0]}]],n=await z.findOne({_id:e});if(!n)return null;for(const[e,a]of Object.entries(n))switch(e){case"_lastInform":s.push([V.parse("Events.Inform"),+a,{object:[+a,0],writable:[+a,0],value:[+a,[+a,"xsd:dateTime"]]}]);break;case"_lastBoot":s.push([V.parse("Events.1_BOOT"),+a,{object:[+a,0],writable:[+a,0],value:[+a,[+a,"xsd:dateTime"]]}]);break;case"_lastBootstrap":s.push([V.parse("Events.0_BOOTSTRAP"),+a,{object:[+a,0],writable:[+a,0],value:[+a,[+a,"xsd:dateTime"]]}]);break;case"_registered":s.push([V.parse("Events.Registered"),t,{object:[t,0],writable:[t,0],value:[t,[+a,"xsd:dateTime"]]}]);break;case"_id":s.push([V.parse("DeviceID.ID"),t,{object:[t,0],writable:[t,0],value:[t,[a,"xsd:string"]]}]);break;case"_tags":a.length&&s.push([V.parse("Tags"),t,{object:[t,1],writable:[t,0]}]);for(let e of a)e=e.replace(/[^a-zA-Z0-9-]+/g,"_"),s.push([V.parse("Tags."+e),t,{object:[t,0],writable:[t,1],value:[t,[!0,"xsd:boolean"]]}]);break;case"_deviceId":null!=a._Manufacturer&&s.push([V.parse("DeviceID.Manufacturer"),t,{object:[t,0],writable:[t,0],value:[t,[a._Manufacturer,"xsd:string"]]}]),null!=a._OUI&&s.push([V.parse("DeviceID.OUI"),t,{object:[t,0],writable:[t,0],value:[t,[a._OUI,"xsd:string"]]}]),null!=a._ProductClass&&s.push([V.parse("DeviceID.ProductClass"),t,{object:[t,0],writable:[t,0],value:[t,[a._ProductClass,"xsd:string"]]}]),null!=a._SerialNumber&&s.push([V.parse("DeviceID.SerialNumber"),t,{object:[t,0],writable:[t,0],value:[t,[a._SerialNumber,"xsd:string"]]}])}return function e(t,n,a,r){t._timestamp&&(t._timestamp=+t._timestamp),t._attributesTimestamp&&(t._attributesTimestamp=+t._attributesTimestamp);const i={};let o=t._timestamp||1;r>o&&(o=r),null!=t._value&&(i.value=[t._timestamp||1,[t._value,t._type]],"xsd:dateTime"===t._type&&(i.value[1][0]=+i.value[1][0]),t._object=!1),null!=t._writable&&(i.writable=[r||1,t._writable?1:0]),null!=t._object&&(i.object=[o,t._object?1:0]),null!=t._notification&&(i.notification=[t._attributesTimestamp||1,t._notification]),null!=t._accessList&&(i.accessList=[t._attributesTimestamp||1,t._accessList]),s.push([V.parse(n.slice(0,-1)),o,i]);for(const[s,r]of Object.entries(t))s.startsWith("_")||(t._object=!0,e(r,n+s+".",a+1,t._timestamp));!t._object&&a||!t._timestamp||s.push([V.parse(n+"*"),t._timestamp])}(n,"",0,0),s}(v.deviceId,v.timestamp);if(D)for(const e of D){const t=v.deviceData.paths.add(e[0]);v.deviceData.timestamps.set(t,e[1],0),e[2]&&v.deviceData.attributes.set(t,e[2],0)}else v.new=!0;return kn(v,m,p,d)}(e,t).then(()=>{vn.concurrentRequests-=1}).catch(e=>{gn.delete(t.connection),vn.concurrentRequests-=1,setTimeout(()=>{throw e});try{t.connection.unref(),t.writeHead(500,{Connection:"close"}),t.end(`${e.name}: ${e.message}`)}catch(e){}})}setInterval(()=>{vn.droppedRequests&&Ue({message:"Worker overloaded",droppedRequests:vn.droppedRequests,totalRequests:vn.totalRequests,initiatedSessions:vn.initiatedSessions,pid:process.pid}),vn.totalRequests=0,vn.droppedRequests=0,vn.initiatedSessions=0},1e4).unref(),async function(){await async function(){ce=n.MongoClient.connect(""+L("MONGODB_CONNECTION_URL"),{useNewUrlParser:!0,useUnifiedTopology:!0}),le=await ce;const e=le.db();B=e.collection("tasks"),await B.createIndex({device:1,timestamp:1}),console.log("database is connected"),z=e.collection("devices"),J=e.collection("presets"),H=e.collection("objects"),Y=e.collection("fs.files"),K=e.collection("provisions"),X=e.collection("virtualParameters"),Z=e.collection("faults"),Q=e.collection("operations"),ee=e.collection("permissions"),te=e.collection("users"),se=e.collection("config"),ne=e.collection("manufacturers"),ae=e.collection("models"),re=e.collection("groups"),ie=e.collection("log"),oe=e.collection("parameterTasks"),ie.insertOne({createdAt:new Date}).then(e=>{ie.indexExists("createdAt").then(e=>{if(!e){let e;e={expireAfterSeconds:63072e3},ie.createIndex({createdAt:1},e)}}).catch(e=>{console.log(e)})}).catch(e=>{console.log(e)})}(),function(e,n){if(xe.hostname=s.hostname(),xe.pid=process.pid,xe.name="HACS-"+e,xe.version=n,Ae=L(e.toUpperCase()+"_LOG_FILE"),Te=L(e.toUpperCase()+"_ACCESS_LOG_FILE"),Ae&&(Ne=t.createWriteStream(null,{fd:t.openSync(Ae,"a")}),Ce=t.fstatSync(Ne.fd)),Te){let e=Te.split("/"),s="";for(let t=1;t<e.length-1;t++)s=s+"/"+e[t];console.log("dir:",s),t.existsSync(s)||t.mkdirSync(s),ke=t.createWriteStream(null,{fd:t.openSync(Te,"a")}),Le=t.fstatSync(ke.fd)}const a=process.env.JOURNAL_STREAM;if(a){const[e,t]=a.split(":").map(parseInt);Ee=Ce.dev===e&&Ce.ino===t,Ie=Le.dev===e&&Le.ino===t}(Ae||Te)&&setTimeout(Pe,6e4-Date.now()%6e4).unref()}("cwmp",dt);const a=L("CWMP_INTERFACE"),r=L("CWMP_PORT");function i(){setTimeout(l,5e3).unref(),Promise.all([fe(),us(),Wt(),Ye.disconnect()]).catch(l)}function l(){Wt().finally(()=>{process.exit(1)})}if(Ye){const s={key:L("CWMP_SSL_KEY"),cert:L("CWMP_SSL_CERT")};process.on("uncaughtException",e=>{"ERR_IPC_DISCONNECTED"!==e.code&&(Ge({message:"Uncaught exception",exception:e,pid:process.pid}),tt().then(i).catch(l))});const n=Promise.all([ls()]).then(()=>{!function(s,n,a,r,i,l=-1){if(et=r,a&&a.key&&a.cert){const s={key:a.key.split(":").map(s=>t.readFileSync(e.resolve(T,s.trim()))),cert:a.cert.split(":").map(s=>t.readFileSync(e.resolve(T,s.trim())))};Qe=c.createServer(s,et),null!=i&&Qe.on("secureConnection",i)}else Qe=o.createServer(et),null!=i&&Qe.on("connection",i);l>=0&&(Qe.keepAliveTimeout=l),Qe.listen(s,n)}(r,a,s,Ln,In,0)}).catch(e=>{setTimeout(()=>{throw e})});process.on("SIGINT",()=>{n.finally(()=>{tt().then(i).catch(l)})}),process.on("SIGTERM",()=>{n.finally(()=>{tt().then(i).catch(l)})})}else{const e=L("CWMP_WORKER_PROCESSES");Fe({message:"genieacs-cwmp starting",pid:process.pid,version:dt}),function(e,t,n){y.default.on("listening",(e,s)=>{4!==s.addressType&&6!==s.addressType||s.address!==n||s.port!==t||Fe({message:"Worker listening",pid:e.process.pid,address:s.address,port:s.port})}),y.default.on("exit",Xe),e||(e=Math.max(2,s.cpus().length));for(let t=0;t<e;++t)Ke()}(e,r,a),process.on("SIGINT",()=>{Fe({message:"Received signal SIGINT, exiting",pid:process.pid}),Ze()}),process.on("SIGTERM",()=>{Fe({message:"Received signal SIGTERM, exiting",pid:process.pid}),Ze()})}}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
